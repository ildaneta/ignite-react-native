{"version":3,"sources":["../../src/android/UserInterfaceStyle.ts"],"names":["CONFIG_CHANGES_ATTRIBUTE","ON_CONFIGURATION_CHANGED","withUiModeManifest","setUiModeAndroidManifest","withUiModeMainActivity","config","modResults","language","contents","addOnConfigurationChangedMainActivity","WarningAggregator","addWarningAndroid","getUserInterfaceStyle","android","userInterfaceStyle","androidManifest","mainActivity","$","match","length","MainActivityWithImports","addJavaImports","pattern","RegExp","replace","javaSource","javaImports","isJava","lines","split","lineIndexWithPackageDeclaration","findIndex","line","javaImport","includes","importStatement","splice","join"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin, withMainActivity } from '../plugins/android-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\nexport const CONFIG_CHANGES_ATTRIBUTE = 'android:configChanges';\n\nexport const ON_CONFIGURATION_CHANGED = `\npublic class MainActivity extends ReactActivity {\n\n    // Added automatically by Expo Config\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Intent intent = new Intent(\"onConfigurationChanged\");\n        intent.putExtra(\"newConfig\", newConfig);\n        sendBroadcast(intent);\n    }\n`;\n\nexport const withUiModeManifest = createAndroidManifestPlugin(\n  setUiModeAndroidManifest,\n  'withUiModeManifest'\n);\n\nexport const withUiModeMainActivity: ConfigPlugin = config => {\n  return withMainActivity(config, config => {\n    if (config.modResults.language === 'java') {\n      config.modResults.contents = addOnConfigurationChangedMainActivity(\n        config,\n        config.modResults.contents\n      );\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-userInterfaceStyle',\n        `Cannot automatically configure MainActivity if it's not java`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getUserInterfaceStyle(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>\n): string {\n  return config.android?.userInterfaceStyle ?? config.userInterfaceStyle ?? 'light';\n}\n\nexport function setUiModeAndroidManifest(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  androidManifest: AndroidManifest\n) {\n  const userInterfaceStyle = getUserInterfaceStyle(config);\n  // TODO: Remove this if we decide to remove any uiMode configuration when not specified\n  if (!userInterfaceStyle) {\n    return androidManifest;\n  }\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n  mainActivity.$[CONFIG_CHANGES_ATTRIBUTE] =\n    'keyboard|keyboardHidden|orientation|screenSize|uiMode';\n\n  return androidManifest;\n}\n\nexport function addOnConfigurationChangedMainActivity(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  mainActivity: string\n): string {\n  const userInterfaceStyle = getUserInterfaceStyle(config);\n  if (!userInterfaceStyle) {\n    return mainActivity;\n  }\n\n  // Cruzan: this is not ideal, but I'm not sure of a better way to handle writing to MainActivity.java\n  if (mainActivity.match(`onConfigurationChanged`)?.length) {\n    return mainActivity;\n  }\n\n  const MainActivityWithImports = addJavaImports(\n    mainActivity,\n    ['android.content.Intent', 'android.content.res.Configuration'],\n    true\n  );\n\n  const pattern = new RegExp(`public class MainActivity extends ReactActivity {`);\n  return MainActivityWithImports.replace(pattern, ON_CONFIGURATION_CHANGED);\n}\n\n// TODO: we should have a generic utility for doing this\nexport function addJavaImports(javaSource: string, javaImports: string[], isJava: boolean): string {\n  const lines = javaSource.split('\\n');\n  const lineIndexWithPackageDeclaration = lines.findIndex(line => line.match(/^package .*;?$/));\n  for (const javaImport of javaImports) {\n    if (!javaSource.includes(javaImport)) {\n      const importStatement = `import ${javaImport}${isJava ? ';' : ''}`;\n      lines.splice(lineIndexWithPackageDeclaration + 1, 0, importStatement);\n    }\n  }\n  return lines.join('\\n');\n}\n"],"file":"UserInterfaceStyle.js"}