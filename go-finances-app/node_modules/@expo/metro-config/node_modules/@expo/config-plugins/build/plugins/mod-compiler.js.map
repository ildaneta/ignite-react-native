{"version":3,"sources":["../../src/plugins/mod-compiler.ts"],"names":["debug","withDefaultBaseMods","config","props","withIntrospectionBaseMods","iosProviders","androidProviders","providers","saveToInternal","skipEmptyMod","preserve","ios","Object","keys","android","mods","platform","platformPreserve","key","includes","compileModsAsync","introspect","evalModsAsync","sortMods","commands","order","allKeys","map","completeOrder","Set","sorted","length","group","shift","commandSet","find","push","orders","projectRoot","platforms","assertMissingModProviders","platformName","entries","name","join","platformProjectRoot","path","projectName","undefined","modName","mod","modRequest","isProvider","errorMessage","PluginError","Warnings","addWarningForPlatform","results","modResults"],"mappings":"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","sourcesContent":["import Debug from 'debug';\nimport path from 'path';\n\nimport { ExportedConfig, Mod, ModConfig, ModPlatform } from '../Plugin.types';\nimport { getHackyProjectName } from '../ios/utils/Xcodeproj';\nimport { PluginError } from '../utils/errors';\nimport * as Warnings from '../utils/warnings';\nimport { assertModResults, ForwardedBaseModOptions } from './createBaseMod';\nimport { getAndroidIntrospectModFileProviders, withAndroidBaseMods } from './withAndroidBaseMods';\nimport { getIosIntrospectModFileProviders, withIosBaseMods } from './withIosBaseMods';\n\nconst debug = Debug('config-plugins:mod-compiler');\n\nexport function withDefaultBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, props);\n  config = withAndroidBaseMods(config, props);\n  return config;\n}\n\n/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */\nexport function withIntrospectionBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  const iosProviders = getIosIntrospectModFileProviders();\n  const androidProviders = getAndroidIntrospectModFileProviders();\n  config = withIosBaseMods(config, {\n    providers: iosProviders,\n    saveToInternal: true,\n    // This writing optimization can be skipped since we never write in introspection mode.\n    // Including empty mods will ensure that all mods get introspected.\n    skipEmptyMod: false,\n    ...props,\n  });\n  config = withAndroidBaseMods(config, {\n    providers: androidProviders,\n    saveToInternal: true,\n    skipEmptyMod: false,\n    ...props,\n  });\n\n  const preserve = {\n    ios: Object.keys(iosProviders),\n    android: Object.keys(androidProviders),\n  };\n\n  if (config.mods) {\n    // Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\n    for (const platform of Object.keys(config.mods) as ModPlatform[]) {\n      if (!(platform in preserve)) {\n        delete config.mods[platform];\n      }\n      const platformPreserve = preserve[platform];\n      for (const key of Object.keys(config.mods[platform] || {})) {\n        if (!platformPreserve?.includes(key)) {\n          // @ts-ignore\n          delete config.mods[platform][key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\n/**\n *\n * @param projectRoot\n * @param config\n */\nexport async function compileModsAsync(\n  config: ExportedConfig,\n  props: {\n    projectRoot: string;\n    platforms?: ModPlatform[];\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n  }\n): Promise<ExportedConfig> {\n  if (props.introspect === true) {\n    config = withIntrospectionBaseMods(config);\n  } else {\n    config = withDefaultBaseMods(config);\n  }\n  return await evalModsAsync(config, props);\n}\n\nfunction sortMods(commands: [string, any][], order: string[]): [string, any][] {\n  const allKeys = commands.map(([key]) => key);\n  const completeOrder = [...new Set([...order, ...allKeys])];\n  const sorted: [string, any][] = [];\n  while (completeOrder.length) {\n    const group = completeOrder.shift()!;\n    const commandSet = commands.find(([key]) => key === group);\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  }\n  return sorted;\n}\n\nconst orders: Record<string, string[]> = {\n  ios: [\n    // dangerous runs first\n    'dangerous',\n    // run the XcodeProject mod second because many plugins attempt to read from it.\n    'xcodeproj',\n  ],\n  android: ['dangerous'],\n};\n/**\n * A generic plugin compiler.\n *\n * @param config\n */\nexport async function evalModsAsync(\n  config: ExportedConfig,\n  {\n    projectRoot,\n    introspect,\n    platforms,\n    /**\n     * Throw errors when mods are missing providers.\n     * @default true\n     */\n    assertMissingModProviders,\n  }: {\n    projectRoot: string;\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n    platforms?: ModPlatform[];\n  }\n): Promise<ExportedConfig> {\n  for (const [platformName, platform] of Object.entries(config.mods ?? ({} as ModConfig))) {\n    if (platforms && !platforms.includes(platformName as any)) {\n      debug(`skip platform: ${platformName}`);\n      continue;\n    }\n\n    let entries = Object.entries(platform);\n    if (entries.length) {\n      // Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\n      entries = sortMods(entries, orders[platformName]!);\n      debug(`run in order: ${entries.map(([name]) => name).join(', ')}`);\n      const platformProjectRoot = path.join(projectRoot, platformName);\n      const projectName =\n        platformName === 'ios' ? getHackyProjectName(projectRoot, config) : undefined;\n\n      for (const [modName, mod] of entries) {\n        const modRequest = {\n          projectRoot,\n          projectName,\n          platformProjectRoot,\n          platform: platformName as ModPlatform,\n          modName,\n          introspect: !!introspect,\n        };\n\n        if (!(mod as Mod).isProvider) {\n          // In strict mode, throw an error.\n          const errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n          if (assertMissingModProviders !== false) {\n            throw new PluginError(errorMessage, 'MISSING_PROVIDER');\n          } else {\n            Warnings.addWarningForPlatform(\n              platformName as ModPlatform,\n              `${platformName}.${modName}`,\n              `Skipping: Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.`\n            );\n            // In loose mode, just skip the mod entirely.\n            continue;\n          }\n        }\n\n        const results = await (mod as Mod)({\n          ...config,\n          modResults: null,\n          modRequest,\n        });\n\n        // Sanity check to help locate non compliant mods.\n        config = assertModResults(results, platformName, modName);\n        // @ts-ignore: data is added for modifications\n        delete config.modResults;\n        // @ts-ignore: info is added for modifications\n        delete config.modRequest;\n      }\n    }\n  }\n\n  return config;\n}\n"],"file":"mod-compiler.js"}