{"version":3,"sources":["../../src/plugins/withAndroidBaseMods.ts"],"names":["readFile","writeFile","promises","sortAndroidManifest","obj","manifest","reverseSortString","Array","isArray","sort","a","b","$","application","map","defaultProviders","dangerous","getFilePath","read","filePath","modResults","write","modRequest","platformProjectRoot","path","join","Manifest","readAndroidManifestAsync","writeAndroidManifestAsync","gradleProperties","Properties","parsePropertiesFile","propertiesListToString","strings","projectRoot","Strings","getProjectStringsXMLPathAsync","Resources","readResourcesXMLAsync","xml","colors","Colors","getProjectColorsXMLPathAsync","colorsNight","kind","styles","Styles","getProjectStylesXMLPathAsync","fallback","resources","projectBuildGradle","Paths","getProjectBuildGradleFilePath","getFileInfo","contents","settingsGradle","getSettingsGradleFilePath","appBuildGradle","getAppBuildGradleFilePath","mainActivity","getProjectFilePath","withAndroidBaseMods","config","providers","props","platform","getAndroidModFileProviders","getAndroidIntrospectModFileProviders","createIntrospectionProvider","modName","fallbackContents","realProvider","Function","android","package"],"mappings":"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","sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { AndroidManifest } from '../android/Manifest';\nimport { parseXMLAsync, writeXMLAsync } from '../utils/XML';\nimport { reverseSortString, sortObject, sortObjWithOrder } from '../utils/sortObject';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nexport function sortAndroidManifest(obj: AndroidManifest) {\n  if (obj.manifest) {\n    // Reverse sort so application is last and permissions are first\n    obj.manifest = sortObject(obj.manifest, reverseSortString);\n\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      // Sort permissions alphabetically\n      obj.manifest['uses-permission'].sort((a, b) => {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n\n    if (Array.isArray(obj.manifest.application)) {\n      // reverse sort applications so activity is towards the end and meta-data is towards the front.\n      obj.manifest.application = obj.manifest.application.map(application => {\n        application = sortObjWithOrder(application, ['meta-data', 'service', 'activity']);\n\n        if (Array.isArray(application['meta-data'])) {\n          // Sort metadata alphabetically\n          application['meta-data'].sort((a, b) => {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath) {\n      return await Manifest.readAndroidManifestAsync(filePath);\n    },\n    async write(filePath, { modResults }) {\n      await Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath) {\n      return Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Strings.getProjectStringsXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Colors.getProjectColorsXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Styles.getProjectStylesXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      // Adds support for `tools:x`\n      const styles = await Resources.readResourcesXMLAsync({\n        path: filePath,\n        fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n      });\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n\nexport function getAndroidIntrospectModFileProviders(): Omit<\n  AndroidDefaultProviders,\n  // Get rid of mods that could potentially fail by being empty.\n  'dangerous' | 'projectBuildGradle' | 'settingsGradle' | 'appBuildGradle' | 'mainActivity'\n> {\n  const createIntrospectionProvider = (\n    modName: keyof typeof defaultProviders,\n    { fallbackContents }: { fallbackContents: any }\n  ) => {\n    const realProvider = defaultProviders[modName];\n    return provider<any>({\n      async getFilePath(...props) {\n        try {\n          return await realProvider.getFilePath(...props);\n        } catch {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n      },\n      async read(...props) {\n        try {\n          return await realProvider.read(...props);\n        } catch {\n          // fallback if a file is missing in introspection mode.\n          if (fallbackContents instanceof Function) {\n            return await fallbackContents(...props);\n          }\n          return fallbackContents;\n        }\n      },\n      async write() {\n        // write nothing in introspection mode.\n      },\n    });\n  };\n\n  // dangerous should never be added\n  return {\n    manifest: createIntrospectionProvider('manifest', {\n      fallbackContents(filePath: string, config: ExportedConfig) {\n        // Keep in sync with https://github.com/expo/expo/blob/master/templates/expo-template-bare-minimum/android/app/src/main/AndroidManifest.xml\n        // TODO: Read from remote template when possible\n        return parseXMLAsync(`\n      <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"${\n        config.android?.package ?? 'com.placeholder.appid'\n      }\">\n\n        <uses-permission android:name=\"android.permission.INTERNET\"/>\n        <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\n        <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n        <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/>\n        <uses-permission android:name=\"android.permission.VIBRATE\"/>\n        <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/>\n        <!-- These require runtime permissions on M -->\n        <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n        <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n        <!-- END OPTIONAL PERMISSIONS -->\n        <application\n          android:name=\".MainApplication\"\n          android:label=\"@string/app_name\"\n          android:icon=\"@mipmap/ic_launcher\"\n          android:roundIcon=\"@mipmap/ic_launcher_round\"\n          android:allowBackup=\"false\"\n          android:theme=\"@style/AppTheme\"\n          android:usesCleartextTraffic=\"true\"\n        >\n          <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\"/>\n          <meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\"/>\n          <activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n            android:launchMode=\"singleTask\"\n            android:windowSoftInputMode=\"adjustResize\"\n            android:theme=\"@style/Theme.App.SplashScreen\"\n          >\n            <intent-filter>\n              <action android:name=\"android.intent.action.MAIN\"/>\n              <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n          </activity>\n          <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n        </application>\n      </manifest>\n      `);\n      },\n    }),\n    gradleProperties: createIntrospectionProvider('gradleProperties', { fallbackContents: [] }),\n    strings: createIntrospectionProvider('strings', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    colors: createIntrospectionProvider('colors', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    colorsNight: createIntrospectionProvider('colorsNight', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    styles: createIntrospectionProvider('styles', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    // projectBuildGradle: createIntrospectionProvider('projectBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // settingsGradle: createIntrospectionProvider('settingsGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // appBuildGradle: createIntrospectionProvider('appBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // mainActivity: createIntrospectionProvider('mainActivity', {\n    //   fallbackContents: {\n    //     path: '',\n    //     contents: '',\n    //     language: 'java',\n    //   } as Paths.ApplicationProjectFile,\n    // }),\n  };\n}\n"],"file":"withAndroidBaseMods.js"}