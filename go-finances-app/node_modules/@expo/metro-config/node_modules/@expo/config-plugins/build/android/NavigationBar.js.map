{"version":3,"sources":["../../src/android/NavigationBar.ts"],"names":["NAVIGATION_BAR_COLOR","withNavigationBar","config","immersiveMode","getNavigationBarImmersiveMode","WarningAggregator","addWarningAndroid","withNavigationBarColors","withNavigationBarStyles","modResults","setNavigationBarColors","setNavigationBarStyles","colors","hexString","getNavigationBarColor","name","value","styles","add","parent","getNavigationBarStyle","androidNavigationBar","visible","backgroundColor","barStyle"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { setColorItem } from './Colors';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\nconst NAVIGATION_BAR_COLOR = 'navigationBarColor';\n\nexport const withNavigationBar: ConfigPlugin = config => {\n  const immersiveMode = getNavigationBarImmersiveMode(config);\n  if (immersiveMode) {\n    // Immersive mode needs to be set programmatically\n    // TODO: Resolve\n    WarningAggregator.addWarningAndroid(\n      'androidNavigationBar.visible',\n      'Hiding the navigation bar must be done programmatically. Refer to the Android documentation - https://developer.android.com/training/system-ui/immersive - for instructions.'\n    );\n  }\n\n  config = withNavigationBarColors(config);\n  config = withNavigationBarStyles(config);\n  return config;\n};\n\nconst withNavigationBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setNavigationBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withNavigationBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setNavigationBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setNavigationBarColors(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  const hexString = getNavigationBarColor(config);\n  if (hexString) {\n    colors = setColorItem(\n      buildResourceItem({\n        name: NAVIGATION_BAR_COLOR,\n        value: hexString,\n      }),\n      colors\n    );\n  }\n  return colors;\n}\n\nexport function setNavigationBarStyles(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  styles = assignStylesValue(styles, {\n    add: !!getNavigationBarColor(config),\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: `android:${NAVIGATION_BAR_COLOR}`,\n    value: `@color/${NAVIGATION_BAR_COLOR}`,\n  });\n\n  styles = assignStylesValue(styles, {\n    add: getNavigationBarStyle(config) === 'dark-content',\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: 'android:windowLightNavigationBar',\n    value: 'true',\n  });\n\n  return styles;\n}\n\nexport function getNavigationBarImmersiveMode(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.visible || null;\n}\n\nexport function getNavigationBarColor(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.backgroundColor || null;\n}\n\nexport function getNavigationBarStyle(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.barStyle || 'light-content';\n}\n"],"file":"NavigationBar.js"}