{"version":3,"file":"isLegacyImportsEnabled.js","sourceRoot":"","sources":["../src/isLegacyImportsEnabled.ts"],"names":[],"mappings":";;;;;;AAAA,mCAAiC;AACjC,oDAA4B;AAI5B;;;;GAIG;AACH,SAAgB,sBAAsB,CAAC,GAAmC;IACxE,IAAI,gBAAO,CAAC,qBAAqB,EAAE,KAAK,CAAC,EAAE;QACzC,OAAO,CAAC,IAAI,CACV,sHAAsH,CACvH,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,sEAAsE;IACtE,qDAAqD;IACrD,OAAO,aAAa,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AACtC,CAAC;AAVD,wDAUC;AAED,SAAS,aAAa,CAAC,OAAuC,EAAE,UAAkB;IAChF,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;QACvB,OAAO,KAAK,CAAC;KACd;IAED,IAAI,OAAO,CAAC,UAAU,KAAK,aAAa,EAAE;QACxC,OAAO,KAAK,CAAC;KACd;IAED,IAAI;QACF,OAAO,gBAAM,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;KACnD;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,GAAG,OAAO,CAAC,UAAU,uDAAuD,CAAC,CAAC;KAC/F;AACH,CAAC","sourcesContent":["import { boolish } from 'getenv';\nimport semver from 'semver';\n\nimport { ExpoConfig } from './Config.types';\n\n/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */\nexport function isLegacyImportsEnabled(exp: Pick<ExpoConfig, 'sdkVersion'>) {\n  if (boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn(\n      'Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.'\n    );\n    return true;\n  }\n  // Only allow target if the SDK version is available and it's less 41.\n  // This is optimized for making future projects work.\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]}