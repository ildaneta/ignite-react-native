{"version":3,"file":"withConfigPlugins.js","sourceRoot":"","sources":["../../src/plugins/withConfigPlugins.ts"],"names":[],"mappings":";;;AAAA,yDAAiE;AAEjE,4CAA2D;AAE3D;;;;;GAKG;AACI,MAAM,iBAAiB,GAAiB,MAAM,CAAC,EAAE;;IACtD,qDAAqD;IACrD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,MAAA,MAAM,CAAC,OAAO,0CAAE,MAAM,CAAA,EAAE;QAC7D,OAAO,MAAM,CAAC;KACf;IACD,+BAA+B;IAC/B,qDAAqD;IACrD,MAAM,GAAG,4BAAW,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7C,oFAAoF;IACpF,OAAO,uCAA2B,CAAC,MAAM,CAAC,CAAC;AAC7C,CAAC,CAAC;AAVW,QAAA,iBAAiB,qBAU5B","sourcesContent":["import { ConfigPlugin, withPlugins } from '@expo/config-plugins';\n\nimport { serializeAfterStaticPlugins } from '../Serialize';\n\n/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */\nexport const withConfigPlugins: ConfigPlugin = config => {\n  // @ts-ignore: plugins not on config type yet -- TODO\n  if (!Array.isArray(config.plugins) || !config.plugins?.length) {\n    return config;\n  }\n  // Resolve and evaluate plugins\n  // @ts-ignore: TODO: add plugins to the config schema\n  config = withPlugins(config, config.plugins);\n  // plugins aren't serialized by default, serialize the plugins after resolving them.\n  return serializeAfterStaticPlugins(config);\n};\n"]}