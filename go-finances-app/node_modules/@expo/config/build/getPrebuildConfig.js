"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrebuildConfig = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const Config_1 = require("./Config");
const getFullName_1 = require("./getFullName");
function getPrebuildConfig(projectRoot, { platforms, bundleIdentifier, packageName, expoUsername, }) {
    var _a, _b;
    // let config: ExpoConfig;
    let { exp: config, ...rest } = Config_1.getConfig(projectRoot, {
        skipSDKVersionRequirement: true,
        isModdedConfig: true,
    });
    const resolvedExpoUsername = typeof expoUsername === 'function'
        ? expoUsername(config)
        : // If the user didn't pass a username then fallback on the static cached username.
            expoUsername !== null && expoUsername !== void 0 ? expoUsername : getFullName_1.getAccountUsername(config);
    // Add all built-in plugins first because they should take
    // priority over the unversioned plugins.
    config = config_plugins_1.withExpoVersionedSDKPlugins(config, {
        expoUsername: resolvedExpoUsername,
    });
    config = config_plugins_1.withExpoLegacyPlugins(config);
    if (platforms.includes('ios')) {
        if (!config.ios)
            config.ios = {};
        config.ios.bundleIdentifier =
            (_a = bundleIdentifier !== null && bundleIdentifier !== void 0 ? bundleIdentifier : config.ios.bundleIdentifier) !== null && _a !== void 0 ? _a : `com.placeholder.appid`;
        // Add all built-in plugins
        config = config_plugins_1.withExpoIOSPlugins(config, {
            bundleIdentifier: config.ios.bundleIdentifier,
        });
    }
    if (platforms.includes('android')) {
        if (!config.android)
            config.android = {};
        config.android.package = (_b = packageName !== null && packageName !== void 0 ? packageName : config.android.package) !== null && _b !== void 0 ? _b : `com.placeholder.appid`;
        // Add all built-in plugins
        config = config_plugins_1.withExpoAndroidPlugins(config, {
            package: config.android.package,
        });
    }
    return { exp: config, ...rest };
}
exports.getPrebuildConfig = getPrebuildConfig;
//# sourceMappingURL=getPrebuildConfig.js.map