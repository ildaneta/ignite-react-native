{"version":3,"file":"Config.types.js","sourceRoot":"","sources":["../src/Config.types.ts"],"names":[],"mappings":";;;AA2FA,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,mCAAiB,CAAA;IACjB,uCAAqB,CAAA;AACvB,CAAC,EAHW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAGzB","sourcesContent":["import { ModConfig } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nexport { ExpoConfig };\n\nexport type PackageJSONConfig = Record<string, any>;\n\nexport interface ProjectConfig {\n  /**\n   * Fully evaluated Expo config with default values injected.\n   */\n  exp: ExpoConfig;\n  /**\n   * Dynamic config for processing native files during the generation process.\n   */\n  mods?: ModConfig | null;\n  /**\n   * Project package.json object with default values injected.\n   */\n  pkg: PackageJSONConfig;\n  /**\n   * Unaltered static config (app.config.json, app.json, or custom json config).\n   * For legacy, an empty object will be returned even if no static config exists.\n   */\n  rootConfig: AppJSONConfig;\n  /**\n   * Path to the static json config file if it exists.\n   * If a project has an app.config.js and an app.json then app.json will be returned.\n   * If a project has an app.config.json and an app.json then app.config.json will be returned.\n   * Returns null if no static config file exists.\n   */\n  staticConfigPath: string | null;\n  /**\n   * Path to an app.config.js or app.config.ts.\n   * Returns null if no dynamic config file exists.\n   */\n  dynamicConfigPath: string | null;\n\n  /**\n   * Returns the type of the value exported from the dynamic config.\n   * This can be used to determine if the dynamic config is potentially extending a static config when (v === 'function').\n   * Returns null if no dynamic config file exists.\n   */\n  dynamicConfigObjectType: string | null;\n}\nexport type AppJSONConfig = { expo: ExpoConfig; [key: string]: any };\nexport type BareAppConfig = { name: string; [key: string]: any };\nexport type HookArguments = {\n  config: any;\n  url: any;\n  exp: ExpoConfig;\n  iosBundle: string;\n  iosSourceMap: string | null;\n  iosManifest: any;\n  androidBundle: string;\n  androidSourceMap: string | null;\n  androidManifest: any;\n  projectRoot: string;\n  log: (msg: any) => void;\n};\n\nexport type ExpoAppManifest = ExpoConfig & {\n  sdkVersion: string;\n  bundledAssets?: string[];\n  isKernel?: boolean;\n  kernel?: { androidManifestPath?: string; iosManifestPath?: string };\n  assetUrlOverride?: string;\n  publishedTime?: string;\n  commitTime?: string;\n  releaseId?: string;\n  revisionId?: string;\n  mainModuleName?: string;\n  env?: Record<string, any>;\n  bundleUrl?: string;\n  debuggerHost?: string;\n  logUrl?: string;\n  hostUri?: string;\n  id?: string;\n  developer?: {\n    tool: string | null;\n    projectRoot?: string;\n  };\n};\n\nexport type Hook = {\n  file: string;\n  config: any;\n};\n\nexport type HookType = 'postPublish' | 'postExport';\n\nexport enum ProjectPrivacy {\n  PUBLIC = 'public',\n  UNLISTED = 'unlisted',\n}\n\nexport type ExpRc = { [key: string]: any };\nexport type Platform = 'android' | 'ios' | 'web';\nexport type ProjectTarget = 'managed' | 'bare';\n\nexport type ConfigErrorCode =\n  | 'NO_APP_JSON'\n  | 'NOT_OBJECT'\n  | 'NO_EXPO'\n  | 'MODULE_NOT_FOUND'\n  | 'INVALID_MODE'\n  | 'INVALID_FORMAT'\n  | 'INVALID_PLUGIN'\n  | 'INVALID_CONFIG';\n\nexport type ConfigContext = {\n  projectRoot: string;\n  /**\n   * The static config path either app.json, app.config.json, or a custom user-defined config.\n   */\n  staticConfigPath: string | null;\n  packageJsonPath: string | null;\n  config: Partial<ExpoConfig>;\n};\n\nexport type GetConfigOptions = {\n  isPublicConfig?: boolean;\n  /**\n   * Should the config `mods` be preserved in the config? Used for compiling mods in the eject command.\n   *\n   * @default false\n   */\n  isModdedConfig?: boolean;\n  skipSDKVersionRequirement?: boolean;\n  strict?: boolean;\n};\n\nexport type WriteConfigOptions = { dryRun?: boolean };\n\nexport type ConfigFilePaths = { staticConfigPath: string | null; dynamicConfigPath: string | null };\n"]}