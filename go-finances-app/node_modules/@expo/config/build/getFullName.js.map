{"version":3,"file":"getFullName.js","sourceRoot":"","sources":["../src/getFullName.ts"],"names":[],"mappings":";;;AAEA,iDAA8C;AAE9C,MAAM,kBAAkB,GAAG,WAAW,CAAC;AAEvC;;;;;;GAMG;AACH,SAAgB,WAAW,CAAC,QAA4C;IACtE,MAAM,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAC9C,OAAO,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;AACzC,CAAC;AAHD,kCAGC;AAED,SAAgB,kBAAkB,CAAC,WAAsC,EAAE;;IACzE,gDAAgD;IAChD,MAAM,QAAQ,GACZ,QAAQ,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;IACpF,IAAI,QAAQ,EAAE;QACZ,OAAO,QAAQ,CAAC;KACjB;IACD,0DAA0D;IAC1D,OAAO,CAAA,MAAA,2BAAY,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,0CAAE,QAAQ,KAAI,kBAAkB,CAAC;AACpE,CAAC;AATD,gDASC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { getUserState } from './getUserState';\n\nconst ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Used in expo-constants to generate the `id` property statically for an app in custom managed workflow.\n * This `id` is used for legacy Expo services AuthSession proxy and Expo notifications device ID.\n *\n * @param manifest\n * @returns\n */\nexport function getFullName(manifest: Pick<ExpoConfig, 'owner' | 'slug'>): string {\n  const username = getAccountUsername(manifest);\n  return `@${username}/${manifest.slug}`;\n}\n\nexport function getAccountUsername(manifest: Pick<ExpoConfig, 'owner'> = {}): string {\n  // TODO: Must match what's generated in Expo Go.\n  const username =\n    manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  // Statically get the username from the global user state.\n  return getUserState().read().auth?.username || ANONYMOUS_USERNAME;\n}\n"]}