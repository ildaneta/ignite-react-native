{"version":3,"file":"getPrebuildConfig.js","sourceRoot":"","sources":["../src/getPrebuildConfig.ts"],"names":[],"mappings":";;;AAAA,yDAM8B;AAG9B,qCAAqC;AACrC,+CAAmD;AAEnD,SAAgB,iBAAiB,CAC/B,WAAmB,EACnB,EACE,SAAS,EACT,gBAAgB,EAChB,WAAW,EACX,YAAY,GAMb;;IAED,0BAA0B;IAC1B,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,kBAAS,CAAC,WAAW,EAAE;QACpD,yBAAyB,EAAE,IAAI;QAC/B,cAAc,EAAE,IAAI;KACrB,CAAC,CAAC;IAEH,MAAM,oBAAoB,GACxB,OAAO,YAAY,KAAK,UAAU;QAChC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;QACtB,CAAC,CAAC,kFAAkF;YAClF,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,gCAAkB,CAAC,MAAM,CAAC,CAAC;IAEjD,0DAA0D;IAC1D,yCAAyC;IACzC,MAAM,GAAG,4CAA2B,CAAC,MAAM,EAAE;QAC3C,YAAY,EAAE,oBAAoB;KACnC,CAAC,CAAC;IACH,MAAM,GAAG,sCAAqB,CAAC,MAAM,CAAC,CAAC;IAEvC,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC7B,IAAI,CAAC,MAAM,CAAC,GAAG;YAAE,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;QACjC,MAAM,CAAC,GAAG,CAAC,gBAAgB;YACzB,MAAA,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,MAAM,CAAC,GAAG,CAAC,gBAAgB,mCAAI,uBAAuB,CAAC;QAE7E,2BAA2B;QAC3B,MAAM,GAAG,mCAAkB,CAAC,MAAM,EAAE;YAClC,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB;SAC9C,CAAC,CAAC;KACJ;IAED,IAAI,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACjC,IAAI,CAAC,MAAM,CAAC,OAAO;YAAE,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,OAAO,GAAG,MAAA,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,MAAM,CAAC,OAAO,CAAC,OAAO,mCAAI,uBAAuB,CAAC;QAE1F,2BAA2B;QAC3B,MAAM,GAAG,uCAAsB,CAAC,MAAM,EAAE;YACtC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,OAAO;SAChC,CAAC,CAAC;KACJ;IAED,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,CAAC;AAClC,CAAC;AAvDD,8CAuDC","sourcesContent":["import {\n  ModPlatform,\n  withExpoAndroidPlugins,\n  withExpoIOSPlugins,\n  withExpoLegacyPlugins,\n  withExpoVersionedSDKPlugins,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nimport { getConfig } from './Config';\nimport { getAccountUsername } from './getFullName';\n\nexport function getPrebuildConfig(\n  projectRoot: string,\n  {\n    platforms,\n    bundleIdentifier,\n    packageName,\n    expoUsername,\n  }: {\n    bundleIdentifier?: string;\n    packageName?: string;\n    platforms: ModPlatform[];\n    expoUsername?: string | ((config: ExpoConfig) => string | null);\n  }\n) {\n  // let config: ExpoConfig;\n  let { exp: config, ...rest } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    isModdedConfig: true,\n  });\n\n  const resolvedExpoUsername =\n    typeof expoUsername === 'function'\n      ? expoUsername(config)\n      : // If the user didn't pass a username then fallback on the static cached username.\n        expoUsername ?? getAccountUsername(config);\n\n  // Add all built-in plugins first because they should take\n  // priority over the unversioned plugins.\n  config = withExpoVersionedSDKPlugins(config, {\n    expoUsername: resolvedExpoUsername,\n  });\n  config = withExpoLegacyPlugins(config);\n\n  if (platforms.includes('ios')) {\n    if (!config.ios) config.ios = {};\n    config.ios.bundleIdentifier =\n      bundleIdentifier ?? config.ios.bundleIdentifier ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withExpoIOSPlugins(config, {\n      bundleIdentifier: config.ios.bundleIdentifier,\n    });\n  }\n\n  if (platforms.includes('android')) {\n    if (!config.android) config.android = {};\n    config.android.package = packageName ?? config.android.package ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withExpoAndroidPlugins(config, {\n      package: config.android.package,\n    });\n  }\n\n  return { exp: config, ...rest };\n}\n"]}