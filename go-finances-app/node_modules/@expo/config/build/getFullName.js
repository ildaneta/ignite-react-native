"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountUsername = exports.getFullName = void 0;
const getUserState_1 = require("./getUserState");
const ANONYMOUS_USERNAME = 'anonymous';
/**
 * Used in expo-constants to generate the `id` property statically for an app in custom managed workflow.
 * This `id` is used for legacy Expo services AuthSession proxy and Expo notifications device ID.
 *
 * @param manifest
 * @returns
 */
function getFullName(manifest) {
    const username = getAccountUsername(manifest);
    return `@${username}/${manifest.slug}`;
}
exports.getFullName = getFullName;
function getAccountUsername(manifest = {}) {
    var _a;
    // TODO: Must match what's generated in Expo Go.
    const username = manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;
    if (username) {
        return username;
    }
    // Statically get the username from the global user state.
    return ((_a = getUserState_1.getUserState().read().auth) === null || _a === void 0 ? void 0 : _a.username) || ANONYMOUS_USERNAME;
}
exports.getAccountUsername = getAccountUsername;
//# sourceMappingURL=getFullName.js.map