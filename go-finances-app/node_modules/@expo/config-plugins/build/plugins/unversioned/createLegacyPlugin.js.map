{"version":3,"file":"createLegacyPlugin.js","sourceRoot":"","sources":["../../../src/plugins/unversioned/createLegacyPlugin.ts"],"names":[],"mappings":";;;AACA,gDAA6C;AAC7C,gDAAqD;AACrD,0DAAuD;AAEvD,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAE1E,SAAgB,kBAAkB,CAAC,EACjC,WAAW,EACX,QAAQ,GAIT;IACC,IAAI,YAA0B,CAAC;IAE/B,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,YAAY,GAAG,MAAM,CAAC,EAAE,CAAC,yBAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KACxD;SAAM;QACL,YAAY,GAAG,QAAQ,CAAC;KACzB;IAED,MAAM,WAAW,GAAiB,MAAM,CAAC,EAAE;QACzC,OAAO,mCAAgB,CAAC,MAAM,EAAE;YAC9B,eAAe,EAAE,IAAI;YACrB,MAAM,EAAE,WAAW;YACnB,6DAA6D;YAC7D,QAAQ,EAAE,iCAAmB,CAAC,YAAY,EAAE,WAAW,CAAC;SACzD,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,WAAW,EAAE,CAAC,CAAC;IAEnD,IAAI,UAAU,EAAE;QACd,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,MAAM,EAAE;YACzC,KAAK,EAAE,UAAU;SAClB,CAAC,CAAC;KACJ;IAED,OAAO,WAAW,CAAC;AACrB,CAAC;AAjCD,gDAiCC","sourcesContent":["import { ConfigPlugin, PluginParameters } from '../../Plugin.types';\nimport { withPlugins } from '../withPlugins';\nimport { createRunOncePlugin } from '../withRunOnce';\nimport { withStaticPlugin } from '../withStaticPlugin';\n\nconst camelize = (s: string) => s.replace(/-./g, x => x.toUpperCase()[1]);\n\nexport function createLegacyPlugin({\n  packageName,\n  fallback,\n}: {\n  packageName: string;\n  fallback: ConfigPlugin | PluginParameters<typeof withPlugins>;\n}): ConfigPlugin {\n  let withFallback: ConfigPlugin;\n\n  if (Array.isArray(fallback)) {\n    withFallback = config => withPlugins(config, fallback);\n  } else {\n    withFallback = fallback;\n  }\n\n  const withUnknown: ConfigPlugin = config => {\n    return withStaticPlugin(config, {\n      _isLegacyPlugin: true,\n      plugin: packageName,\n      // If the static plugin isn't found, use the unversioned one.\n      fallback: createRunOncePlugin(withFallback, packageName),\n    });\n  };\n\n  const methodName = camelize(`with-${packageName}`);\n\n  if (methodName) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: methodName,\n    });\n  }\n\n  return withUnknown;\n}\n"]}