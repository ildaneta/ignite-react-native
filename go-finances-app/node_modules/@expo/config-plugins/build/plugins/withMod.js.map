{"version":3,"file":"withMod.js","sourceRoot":"","sources":["../../src/plugins/withMod.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport chalk from 'chalk';\nimport { boolish } from 'getenv';\n\nimport { ExportedConfig, ExportedConfigWithProps, Mod, ModPlatform } from '../Plugin.types';\nimport { PluginError } from '../utils/errors';\n\nconst EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\nexport type BaseModOptions = {\n  platform: ModPlatform;\n  mod: string;\n  isProvider?: boolean;\n  skipEmptyMod?: boolean;\n  saveToInternal?: boolean;\n};\n\n/**\n * Plugin to intercept execution of a given `mod` with the given `action`.\n * If an action was already set on the given `config` config for `mod`, then it\n * will be provided to the `action` as `nextMod` when it's evaluated, otherwise\n * `nextMod` will be an identity function.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to intercept\n * @param skipEmptyMod should skip running the action if there is no existing mod to intercept\n * @param saveToInternal should save the results to `_internal.modResults`, only enable this when the results are pure JSON.\n * @param isProvider should provide data up to the other mods.\n * @param action method to run on the mod when the config is compiled\n */\nexport function withBaseMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n    skipEmptyMod,\n    isProvider,\n    saveToInternal,\n  }: BaseModOptions & { action: Mod<T> }\n): ExportedConfig {\n  if (!config.mods) {\n    config.mods = {};\n  }\n  if (!config.mods[platform]) {\n    config.mods[platform] = {};\n  }\n\n  let interceptedMod: Mod<T> = (config.mods[platform] as Record<string, any>)[mod];\n\n  // No existing mod to intercept\n  if (!interceptedMod) {\n    if (skipEmptyMod) {\n      // Skip running the action\n      return config;\n    }\n    // Use a noop mod and continue\n    const noopMod: Mod<T> = config => config;\n    interceptedMod = noopMod;\n  }\n\n  // Create a stack trace for debugging ahead of time\n  let debugTrace: string = '';\n  // Use the possibly user defined value. Otherwise fallback to the env variable.\n  // We support the env variable because user mods won't have _internal defined in time.\n  const isDebug = config._internal?.isDebug ?? EXPO_DEBUG;\n  if (isDebug) {\n    // Get a stack trace via the Error API\n    const stack = new Error().stack;\n    // Format the stack trace to create the debug log\n    debugTrace = getDebugPluginStackFromStackTrace(stack);\n    const modStack = chalk.bold(`${platform}.${mod}`);\n\n    debugTrace = `${modStack}: ${debugTrace}`;\n  }\n\n  // Prevent adding multiple providers to a mod.\n  // Base mods that provide files ignore any incoming modResults and therefore shouldn't have provider mods as parents.\n  if (interceptedMod.isProvider) {\n    if (isProvider) {\n      throw new PluginError(\n        `Cannot set provider mod for \"${platform}.${mod}\" because another is already being used.`,\n        'CONFLICTING_PROVIDER'\n      );\n    } else {\n      throw new PluginError(\n        `Cannot add mod to \"${platform}.${mod}\" because the provider has already been added. Provider must be the last mod added.`,\n        'INVALID_MOD_ORDER'\n      );\n    }\n  }\n\n  async function interceptingMod({ modRequest, ...config }: ExportedConfigWithProps<T>) {\n    if (isDebug) {\n      // In debug mod, log the plugin stack in the order which they were invoked\n      console.log(debugTrace);\n    }\n    const results = await action({\n      ...config,\n      modRequest: { ...modRequest, nextMod: interceptedMod },\n    });\n\n    if (saveToInternal) {\n      saveToInternalObject(results, platform, mod, (results.modResults as unknown) as JSONObject);\n    }\n    return results;\n  }\n\n  // Ensure this base mod is registered as the provider.\n  interceptingMod.isProvider = isProvider;\n\n  (config.mods[platform] as any)[mod] = interceptingMod;\n\n  return config;\n}\n\nfunction saveToInternalObject(\n  config: Pick<ExpoConfig, '_internal'>,\n  platformName: ModPlatform,\n  modName: string,\n  results: JSONObject\n) {\n  if (!config._internal) config._internal = {};\n  if (!config._internal.modResults) config._internal.modResults = {};\n  if (!config._internal.modResults[platformName]) config._internal.modResults[platformName] = {};\n  config._internal.modResults[platformName][modName] = results;\n}\n\nfunction getDebugPluginStackFromStackTrace(stacktrace?: string): string {\n  if (!stacktrace) {\n    return '';\n  }\n\n  const treeStackLines: string[] = [];\n  for (const line of stacktrace.split('\\n')) {\n    const [first, second] = line.trim().split(' ');\n    if (first === 'at') {\n      treeStackLines.push(second);\n    }\n  }\n\n  const plugins = treeStackLines\n    .map(first => {\n      // Match the first part of the stack trace against the plugin naming convention\n      // \"with\" followed by a capital letter.\n      return (\n        first?.match(/^(\\bwith[A-Z].*?\\b)/)?.[1]?.trim() ??\n        first?.match(/\\.(\\bwith[A-Z].*?\\b)/)?.[1]?.trim() ??\n        null\n      );\n    })\n    .filter(Boolean)\n    .filter(plugin => {\n      // redundant as all debug logs are captured in withBaseMod\n      return !['withMod', 'withBaseMod', 'withExtendedMod'].includes(plugin!);\n    });\n\n  const commonPlugins = ['withPlugins', 'withRunOnce', 'withStaticPlugin'];\n\n  return (\n    (plugins as string[])\n      .reverse()\n      .map((pluginName, index) => {\n        // Base mods indicate a logical section.\n        if (pluginName.includes('BaseMod')) {\n          pluginName = chalk.bold(pluginName);\n        }\n        // highlight dangerous mods\n        if (pluginName.toLowerCase().includes('dangerous')) {\n          pluginName = chalk.red(pluginName);\n        }\n\n        if (index === 0) {\n          return chalk.blue(pluginName);\n        } else if (commonPlugins.includes(pluginName)) {\n          // Common mod names often clutter up the logs, dim them out\n          return chalk.dim(pluginName);\n        }\n        return pluginName;\n      })\n      // Join the results:\n      // withExpoAndroidPlugins ➜ withPlugins ➜ withIcons ➜ withDangerousMod ➜ withMod\n      .join(' ➜ ')\n  );\n}\n\n/**\n * Plugin to extend a mod function in the plugins config.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to extend\n * @param action method to run on the mod when the config is compiled\n */\nexport function withMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n  }: {\n    platform: ModPlatform;\n    mod: string;\n    action: Mod<T>;\n  }\n): ExportedConfig {\n  return withBaseMod(config, {\n    platform,\n    mod,\n    isProvider: false,\n    async action({ modRequest: { nextMod, ...modRequest }, modResults, ...config }) {\n      const results = await action({ modRequest, modResults: modResults as T, ...config });\n      return nextMod!(results as any);\n    },\n  });\n}\n"]}