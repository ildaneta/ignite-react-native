{"version":3,"file":"android-plugins.js","sourceRoot":"","sources":["../../src/plugins/android-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin, Mod } from '../Plugin.types';\nimport { Manifest, Paths, Properties, Resources } from '../android';\nimport { withMod } from './withMod';\n\ntype OptionalPromise<T> = T | Promise<T>;\n\ntype MutateDataAction<T> = (expo: ExpoConfig, data: T) => OptionalPromise<T>;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createAndroidManifestPlugin(\n  action: MutateDataAction<Manifest.AndroidManifest>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withAndroidManifest(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\nexport function createStringsXmlPlugin(\n  action: MutateDataAction<Resources.ResourceXML>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withStringsXml(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AndroidManifest.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withAndroidManifest: ConfigPlugin<Mod<Manifest.AndroidManifest>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'manifest',\n    action,\n  });\n};\n\n/**\n * Provides the strings.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withStringsXml: ConfigPlugin<Mod<Resources.ResourceXML>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'strings',\n    action,\n  });\n};\n\n/**\n * Provides the project MainActivity for modification.\n *\n * @param config\n * @param action\n */\nexport const withMainActivity: ConfigPlugin<Mod<Paths.ApplicationProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    action,\n  });\n};\n\n/**\n * Provides the project /build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withProjectBuildGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the app/build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppBuildGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the /settings.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withSettingsGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    action,\n  });\n};\n\n/**\n * Provides the /gradle.properties for modification.\n *\n * @param config\n * @param action\n */\nexport const withGradleProperties: ConfigPlugin<Mod<Properties.PropertiesItem[]>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'gradleProperties',\n    action,\n  });\n};\n"]}