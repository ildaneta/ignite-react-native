{"version":3,"file":"withIosBaseMods.js","sourceRoot":"","sources":["../../src/plugins/withIosBaseMods.ts"],"names":[],"mappings":";;;;;;AACA,wDAAgC;AAChC,oDAA4B;AAC5B,2BAA8B;AAC9B,gDAAwB;AACxB,kDAA4C;AAG5C,gCAA6C;AAE7C,mDAA2F;AAE3F,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,aAAQ,CAAC;AAIzC,MAAM,gBAAgB,GAAG;IACvB,SAAS,EAAE,wBAAQ,CAAU;QAC3B,WAAW;YACT,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,KAAK,CAAC,IAAI;YACR,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,KAAK,CAAC,KAAK,KAAI,CAAC;KACjB,CAAC;IACF,6EAA6E;IAC7E,WAAW,EAAE,wBAAQ,CAA+B;QAClD,WAAW,CAAC,EAAE,UAAU,EAAE,EAAE,WAAW,EAAE,EAAE;YACzC,OAAO,WAAK,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,QAAQ;YACjB,OAAO,WAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;QACD,KAAK,CAAC,KAAK,CAAC,QAAgB,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,EAAE;YACxD,MAAM,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC;KACF,CAAC;IACF,0EAA0E;IAC1E,SAAS,EAAE,wBAAQ,CAAa;QAC9B,WAAW,CAAC,EAAE,UAAU,EAAE,EAAE,mBAAmB,EAAE,WAAW,EAAE,EAAE;YAC9D,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,WAAY,EAAE,YAAY,CAAC,CAAC;YACvF,OAAO,cAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;QACzD,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,QAAQ;YACjB,OAAO,eAAK,CAAC,KAAK,CAAC,MAAM,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QACvD,CAAC;QACD,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE;YAClC,MAAM,SAAS,CAAC,QAAQ,EAAE,eAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QACrD,CAAC;KACF,CAAC;IACF,0EAA0E;IAC1E,SAAS,EAAE,wBAAQ,CAAe;QAChC,WAAW,CAAC,EAAE,UAAU,EAAE,EAAE,WAAW,EAAE,EAAE;YACzC,OAAO,WAAK,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAC9C,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,QAAQ;YACjB,MAAM,OAAO,GAAG,eAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACxC,OAAO,CAAC,SAAS,EAAE,CAAC;YACpB,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE;YAClC,MAAM,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC;QACpD,CAAC;KACF,CAAC;IACF,0EAA0E;IAC1E,SAAS,EAAE,wBAAQ,CAAqC;QACtD,WAAW,CAAC,MAAM;YAChB,OAAO,WAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC/D,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM;YACzB,sEAAsE;YACtE,yIAAyI;YACzI,IAAI,CAAC,MAAM,CAAC,GAAG;gBAAE,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS;gBAAE,MAAM,CAAC,GAAG,CAAC,SAAS,GAAG,EAAE,CAAC;YAErD,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAClD,gBAAM,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;YACxC,MAAM,UAAU,GAAG,eAAK,CAAC,KAAK,CAAC,QAAQ,CAAc,CAAC;YAEtD,MAAM,CAAC,GAAG,CAAC,SAAS,GAAG;gBACrB,GAAG,CAAC,UAAU,IAAI,EAAE,CAAC;gBACrB,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS;aACxB,CAAC;YAEF,OAAO,UAAU,CAAC;QACpB,CAAC;QACD,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM;YAC1B,qDAAqD;YACrD,IAAI,CAAC,MAAM,CAAC,GAAG;gBAAE,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;YACjC,MAAM,CAAC,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC;YAEzC,MAAM,SAAS,CAAC,QAAQ,EAAE,eAAK,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAC5D,CAAC;KACF,CAAC;IACF,gFAAgF;IAChF,YAAY,EAAE,wBAAQ,CAAsC;QAC1D,WAAW,CAAC,MAAM;YAChB,OAAO,kBAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACzE,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM;YACzB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAClD,gBAAM,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;YAChD,MAAM,UAAU,GAAG,eAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEzC,4EAA4E;YAC5E,4IAA4I;YAC5I,IAAI,CAAC,MAAM,CAAC,GAAG;gBAAE,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY;gBAAE,MAAM,CAAC,GAAG,CAAC,YAAY,GAAG,EAAE,CAAC;YAE3D,MAAM,CAAC,GAAG,CAAC,YAAY,GAAG;gBACxB,GAAG,CAAC,UAAU,IAAI,EAAE,CAAC;gBACrB,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY;aAC3B,CAAC;YAEF,OAAO,UAAU,CAAC;QACpB,CAAC;QACD,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM;YAC1B,wDAAwD;YACxD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;gBACf,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;aACjB;YACD,MAAM,CAAC,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC;YAE5C,MAAM,SAAS,CAAC,QAAQ,EAAE,eAAK,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAC5D,CAAC;KACF,CAAC;CACH,CAAC;AAIF,SAAgB,eAAe,CAC7B,MAAsB,EACtB,EACE,SAAS,EACT,GAAG,KAAK,KACkE,EAAE;IAE9E,OAAO,qCAAqB,CAAa,MAAM,EAAE;QAC/C,GAAG,KAAK;QACR,QAAQ,EAAE,KAAK;QACf,SAAS,EAAE,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,sBAAsB,EAAE;KACjD,CAAC,CAAC;AACL,CAAC;AAZD,0CAYC;AAED,SAAgB,sBAAsB;IACpC,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAFD,wDAEC;AAED;;;;;GAKG;AACH,SAAgB,gCAAgC;IAK9C,MAAM,2BAA2B,GAAG,CAClC,OAAsC,EACtC,EAAE,gBAAgB,EAA6B,EAC/C,EAAE;QACF,MAAM,YAAY,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC/C,OAAO,wBAAQ,CAAM;YACnB,KAAK,CAAC,WAAW,CAAC,GAAG,KAAK;gBACxB,IAAI;oBACF,OAAO,MAAM,YAAY,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,CAAC;iBACjD;gBAAC,MAAM;oBACN,qDAAqD;oBACrD,OAAO,EAAE,CAAC;iBACX;YACH,CAAC;YACD,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK;gBACjB,IAAI;oBACF,OAAO,MAAM,YAAY,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;iBAC1C;gBAAC,MAAM;oBACN,uDAAuD;oBACvD,OAAO,gBAAgB,CAAC;iBACzB;YACH,CAAC;YACD,KAAK,CAAC,KAAK;gBACT,uCAAuC;YACzC,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,kCAAkC;IAClC,OAAO;QACL,4DAA4D;QAC5D,wBAAwB;QACxB,gBAAgB;QAChB,oBAAoB;QACpB,wBAAwB;QACxB,uCAAuC;QACvC,MAAM;QACN,wDAAwD;QACxD,0CAA0C;QAC1C,MAAM;QACN,SAAS,EAAE,2BAA2B,CAAC,WAAW,EAAE;YAClD,gBAAgB,EAAE,EAAgB;SACnC,CAAC;QAEF,SAAS,EAAE;YACT,KAAK,CAAC,WAAW,CAAC,GAAG,KAAK;gBACxB,IAAI;oBACF,OAAO,MAAM,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,CAAC;iBAC/D;gBAAC,MAAM;oBACN,OAAO,EAAE,CAAC;iBACX;YACH,CAAC;YAED,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK;;gBAChC,IAAI;oBACF,OAAO,MAAM,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;iBACvE;gBAAC,MAAM;oBACN,+DAA+D;oBAC/D,OAAO,CACL,MAAA,MAAA,MAAM,CAAC,GAAG,0CAAE,SAAS,mCAAI;wBACvB,yBAAyB,EAAE,yBAAyB;wBACpD,kBAAkB,EAAE,oBAAoB;wBACxC,kBAAkB,EAAE,8BAA8B;wBAClD,YAAY,EAAE,iBAAiB;wBAC/B,mBAAmB,EAAE,gCAAgC;wBACrD,6BAA6B,EAAE,KAAK;wBACpC,iBAAiB,EAAE,MAAM;wBACzB,kBAAkB,EAAE,IAAI;wBACxB,sBAAsB,EAAE;4BACtB,sBAAsB,EAAE,IAAI;4BAC5B,kBAAkB,EAAE;gCAClB,SAAS,EAAE;oCACT,kCAAkC,EAAE,IAAI;iCACzC;6BACF;yBACF;wBACD,sBAAsB,EAAE,cAAc;wBACtC,4BAA4B,EAAE,CAAC,OAAO,CAAC;wBACvC,wCAAwC,EAAE,KAAK;wBAC/C,gBAAgB,EAAE,yBAAyB;qBAC5C,CACF,CAAC;iBACH;YACH,CAAC;YAED,KAAK,CAAC,QAAQ,EAAE,MAAM;gBACpB,qDAAqD;gBACrD,IAAI,CAAC,MAAM,CAAC,GAAG;oBAAE,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;gBAEjC,MAAM,CAAC,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC;YAC3C,CAAC;SACF;QAED,YAAY,EAAE;YACZ,KAAK,CAAC,WAAW,CAAC,GAAG,KAAK;gBACxB,IAAI;oBACF,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,CAAC;iBAClE;gBAAC,MAAM;oBACN,OAAO,EAAE,CAAC;iBACX;YACH,CAAC;YAED,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK;;gBAChC,IAAI;oBACF,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC1E;gBAAC,MAAM;oBACN,kEAAkE;oBAClE,OAAO,MAAA,MAAA,MAAM,CAAC,GAAG,0CAAE,YAAY,mCAAI,EAAE,CAAC;iBACvC;YACH,CAAC;YAED,KAAK,CAAC,QAAQ,EAAE,MAAM;gBACpB,wDAAwD;gBACxD,IAAI,CAAC,MAAM,CAAC,GAAG;oBAAE,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;gBAEjC,MAAM,CAAC,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC;YAC9C,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AA5HD,4EA4HC","sourcesContent":["import { JSONObject } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath) {\n      return plist.parse(await readFile(filePath, 'utf8'));\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, plist.build(modResults));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    getFilePath(config) {\n      return Paths.getInfoPlistPath(config.modRequest.projectRoot);\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      const contents = await readFile(filePath, 'utf8');\n      assert(contents, 'Info.plist is empty');\n      const modResults = plist.parse(contents) as InfoPlist;\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return modResults;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) config.ios = {};\n      config.ios.infoPlist = config.modResults;\n\n      await writeFile(filePath, plist.build(config.modResults));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    getFilePath(config) {\n      return Entitlements.getEntitlementsPath(config.modRequest.projectRoot);\n    },\n    async read(filePath, config) {\n      const contents = await readFile(filePath, 'utf8');\n      assert(contents, 'Entitlements plist is empty');\n      const modResults = plist.parse(contents);\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return modResults;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      await writeFile(filePath, plist.build(config.modResults));\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n\n/**\n * Get file providers that run introspection without modifying the actual native source code.\n * This can be used to determine the absolute static `ios.infoPlist` and `ios.entitlements` objects.\n *\n * @returns\n */\nexport function getIosIntrospectModFileProviders(): Omit<\n  IosDefaultProviders,\n  // Get rid of mods that could potentially fail by being empty.\n  'dangerous' | 'xcodeproj' | 'appDelegate'\n> {\n  const createIntrospectionProvider = (\n    modName: keyof typeof defaultProviders,\n    { fallbackContents }: { fallbackContents: any }\n  ) => {\n    const realProvider = defaultProviders[modName];\n    return provider<any>({\n      async getFilePath(...props) {\n        try {\n          return await realProvider.getFilePath(...props);\n        } catch {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n      },\n      async read(...props) {\n        try {\n          return await realProvider.read(...props);\n        } catch {\n          // fallback if a file is missing in introspection mode.\n          return fallbackContents;\n        }\n      },\n      async write() {\n        // write nothing in introspection mode.\n      },\n    });\n  };\n\n  // dangerous should never be added\n  return {\n    // appDelegate: createIntrospectionProvider('appDelegate', {\n    //   fallbackContents: {\n    //     path: '',\n    //     contents: '',\n    //     language: 'objc',\n    //   } as Paths.AppDelegateProjectFile,\n    // }),\n    // xcodeproj: createIntrospectionProvider('xcodeproj', {\n    //   fallbackContents: {} as XcodeProject,\n    // }),\n    expoPlist: createIntrospectionProvider('expoPlist', {\n      fallbackContents: {} as JSONObject,\n    }),\n\n    infoPlist: {\n      async getFilePath(...props) {\n        try {\n          return await defaultProviders.infoPlist.getFilePath(...props);\n        } catch {\n          return '';\n        }\n      },\n\n      async read(filePath, config, props) {\n        try {\n          return await defaultProviders.infoPlist.read(filePath, config, props);\n        } catch {\n          // Fallback to using the infoPlist object from the Expo config.\n          return (\n            config.ios?.infoPlist ?? {\n              CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n              CFBundleExecutable: '$(EXECUTABLE_NAME)',\n              CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n              CFBundleName: '$(PRODUCT_NAME)',\n              CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n              CFBundleInfoDictionaryVersion: '6.0',\n              CFBundleSignature: '????',\n              LSRequiresIPhoneOS: true,\n              NSAppTransportSecurity: {\n                NSAllowsArbitraryLoads: true,\n                NSExceptionDomains: {\n                  localhost: {\n                    NSExceptionAllowsInsecureHTTPLoads: true,\n                  },\n                },\n              },\n              UILaunchStoryboardName: 'SplashScreen',\n              UIRequiredDeviceCapabilities: ['armv7'],\n              UIViewControllerBasedStatusBarAppearance: false,\n              UIStatusBarStyle: 'UIStatusBarStyleDefault',\n            }\n          );\n        }\n      },\n\n      write(filePath, config) {\n        // Update the contents of the static infoPlist object\n        if (!config.ios) config.ios = {};\n\n        config.ios.infoPlist = config.modResults;\n      },\n    },\n\n    entitlements: {\n      async getFilePath(...props) {\n        try {\n          return await defaultProviders.entitlements.getFilePath(...props);\n        } catch {\n          return '';\n        }\n      },\n\n      async read(filePath, config, props) {\n        try {\n          return await defaultProviders.entitlements.read(filePath, config, props);\n        } catch {\n          // Fallback to using the entitlements object from the Expo config.\n          return config.ios?.entitlements ?? {};\n        }\n      },\n\n      write(filePath, config) {\n        // Update the contents of the static entitlements object\n        if (!config.ios) config.ios = {};\n\n        config.ios.entitlements = config.modResults;\n      },\n    },\n  };\n}\n"]}