{"version":3,"file":"expo-plugins.js","sourceRoot":"","sources":["../../src/plugins/expo-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * These are the versioned first-party plugins with some of the future third-party plugins mixed in for legacy support.\n */\nimport { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport * as AndroidConfig from '../android';\nimport * as IOSConfig from '../ios';\nimport withAdMob from './unversioned/expo-ads-admob';\nimport withAppleAuthentication from './unversioned/expo-apple-authentication';\nimport withBranch from './unversioned/expo-branch';\nimport withContacts from './unversioned/expo-contacts';\nimport withDocumentPicker from './unversioned/expo-document-picker';\nimport withFacebook from './unversioned/expo-facebook';\nimport withNotifications from './unversioned/expo-notifications';\nimport withSplashScreen from './unversioned/expo-splash-screen';\nimport withUpdates from './unversioned/expo-updates';\nimport withMaps from './unversioned/react-native-maps';\nimport { withPlugins } from './withPlugins';\nimport { withStaticPlugin } from './withStaticPlugin';\n\n/**\n * Config plugin to apply all of the custom Expo iOS config plugins we support by default.\n * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...\n */\nexport const withExpoIOSPlugins: ConfigPlugin<{\n  bundleIdentifier: string;\n}> = (config, { bundleIdentifier }) => {\n  // Set the bundle ID ahead of time.\n  if (!config.ios) config.ios = {};\n  config.ios.bundleIdentifier = bundleIdentifier;\n\n  return withPlugins(config, [\n    [IOSConfig.BundleIdentifier.withBundleIdentifier, { bundleIdentifier }],\n    IOSConfig.Swift.withSwiftBridgingHeader,\n    IOSConfig.Swift.withNoopSwiftFile,\n    IOSConfig.Google.withGoogle,\n    IOSConfig.Name.withDisplayName,\n    IOSConfig.Orientation.withOrientation,\n    IOSConfig.RequiresFullScreen.withRequiresFullScreen,\n    IOSConfig.Scheme.withScheme,\n    IOSConfig.UserInterfaceStyle.withUserInterfaceStyle,\n    IOSConfig.UsesNonExemptEncryption.withUsesNonExemptEncryption,\n    IOSConfig.Version.withBuildNumber,\n    IOSConfig.Version.withVersion,\n    IOSConfig.Google.withGoogleServicesFile,\n    // Entitlements\n    IOSConfig.Entitlements.withAssociatedDomains,\n    // XcodeProject\n    IOSConfig.DeviceFamily.withDeviceFamily,\n    IOSConfig.Locales.withLocales,\n    // Dangerous\n    IOSConfig.Icons.withIcons,\n  ]);\n};\n\n/**\n * Config plugin to apply all of the custom Expo Android config plugins we support by default.\n * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...\n */\nexport const withExpoAndroidPlugins: ConfigPlugin<{\n  package: string;\n}> = (config, props) => {\n  // Set the package name ahead of time.\n  if (!config.android) config.android = {};\n  config.android.package = props.package;\n\n  return withPlugins(config, [\n    // settings.gradle\n    AndroidConfig.Name.withNameSettingsGradle,\n\n    // project build.gradle\n    AndroidConfig.GoogleServices.withClassPath,\n\n    // app/build.gradle\n    AndroidConfig.GoogleServices.withApplyPlugin,\n    AndroidConfig.Package.withPackageGradle,\n    AndroidConfig.Version.withVersion,\n\n    // AndroidManifest.xml\n    AndroidConfig.Package.withPackageManifest,\n    AndroidConfig.AllowBackup.withAllowBackup,\n    // Note: The withAndroidIntentFilters plugin must appear before the withScheme\n    // plugin or withScheme will override the output of withAndroidIntentFilters.\n    AndroidConfig.IntentFilters.withAndroidIntentFilters,\n    AndroidConfig.Scheme.withScheme,\n    AndroidConfig.Orientation.withOrientation,\n    AndroidConfig.Permissions.withPermissions,\n    AndroidConfig.UserInterfaceStyle.withUiModeManifest,\n\n    // MainActivity.*\n    AndroidConfig.UserInterfaceStyle.withUiModeMainActivity,\n\n    // strings.xml\n    AndroidConfig.Name.withName,\n\n    // Dangerous -- these plugins run in reverse order.\n    AndroidConfig.GoogleServices.withGoogleServicesFile,\n\n    // Modify colors.xml and styles.xml\n    AndroidConfig.RootViewBackgroundColor.withRootViewBackgroundColor,\n    AndroidConfig.NavigationBar.withNavigationBar,\n    AndroidConfig.StatusBar.withStatusBar,\n    AndroidConfig.PrimaryColor.withPrimaryColor,\n\n    AndroidConfig.Icon.withIcons,\n    // If we renamed the package, we should also move it around and rename it in source files\n    // Added last to ensure this plugin runs first. Out of tree solutions will mistakenly resolve the package incorrectly otherwise.\n    AndroidConfig.Package.withPackageRefactor,\n  ]);\n};\n\nexport const withExpoVersionedSDKPlugins: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withPlugins(config, [\n    withMaps,\n    withAdMob,\n    withAppleAuthentication,\n    withContacts,\n    withNotifications,\n    [withUpdates, { expoUsername }],\n    withBranch,\n    withDocumentPicker,\n    withFacebook,\n    withSplashScreen,\n  ]);\n};\n\nexport function getExpoLegacyPlugins() {\n  return expoLegacyPlugins;\n}\n\n// Expo managed packages that require extra update.\n// These get applied automatically to create parity with expo build in eas build.\nconst expoLegacyPlugins = [\n  'expo-app-auth',\n  'expo-av',\n  'expo-background-fetch',\n  'expo-barcode-scanner',\n  'expo-brightness',\n  'expo-calendar',\n  'expo-camera',\n  'expo-dev-menu',\n  'expo-dev-launcher',\n  'expo-dev-client',\n  'expo-image-picker',\n  'expo-file-system',\n  'expo-ads-facebook',\n  'expo-location',\n  'expo-media-library',\n  'expo-screen-orientation',\n  'expo-sensors',\n  'expo-task-manager',\n  'expo-local-authentication',\n];\n\n// Plugins that need to be automatically applied, but also get applied by expo-cli if the versioned plugin isn't available.\n// These are split up because the user doesn't need to be prompted to setup these packages.\nconst expoManagedVersionedPlugins = [\n  'expo-firebase-analytics',\n  'expo-firebase-core',\n  'expo-google-sign-in',\n];\n\nconst withOptionalLegacyPlugins: ConfigPlugin<(StaticPlugin | string)[]> = (config, plugins) => {\n  return plugins.reduce((prev, plugin) => {\n    return withStaticPlugin(prev, {\n      // hide errors\n      _isLegacyPlugin: true,\n      plugin,\n      // If a plugin doesn't exist, do nothing.\n      fallback: config => config,\n    });\n  }, config);\n};\n\nexport function withExpoLegacyPlugins(config: ExpoConfig) {\n  return withOptionalLegacyPlugins(config, [\n    ...new Set(expoManagedVersionedPlugins.concat(expoLegacyPlugins)),\n  ]);\n}\n"]}