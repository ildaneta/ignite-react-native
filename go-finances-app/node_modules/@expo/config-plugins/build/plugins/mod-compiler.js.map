{"version":3,"file":"mod-compiler.js","sourceRoot":"","sources":["../../src/plugins/mod-compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { ExportedConfig, Mod, ModConfig, ModPlatform } from '../Plugin.types';\nimport { getHackyProjectName } from '../ios/utils/Xcodeproj';\nimport { PluginError } from '../utils/errors';\nimport { assertModResults, ForwardedBaseModOptions } from './createBaseMod';\nimport { getAndroidIntrospectModFileProviders, withAndroidBaseMods } from './withAndroidBaseMods';\nimport { getIosIntrospectModFileProviders, withIosBaseMods } from './withIosBaseMods';\n\nexport function withDefaultBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, props);\n  config = withAndroidBaseMods(config, props);\n  return config;\n}\n\n/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */\nexport function withIntrospectionBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  const iosProviders = getIosIntrospectModFileProviders();\n  const androidProviders = getAndroidIntrospectModFileProviders();\n  config = withIosBaseMods(config, {\n    providers: iosProviders,\n    saveToInternal: true,\n    // This writing optimization can be skipped since we never write in introspection mode.\n    // Including empty mods will ensure that all mods get introspected.\n    skipEmptyMod: false,\n    ...props,\n  });\n  config = withAndroidBaseMods(config, {\n    providers: androidProviders,\n    saveToInternal: true,\n    skipEmptyMod: false,\n    ...props,\n  });\n\n  const preserve = {\n    ios: Object.keys(iosProviders),\n    android: Object.keys(androidProviders),\n  };\n\n  if (config.mods) {\n    // Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\n    for (const platform of Object.keys(config.mods) as ModPlatform[]) {\n      if (!(platform in preserve)) {\n        delete config.mods[platform];\n      }\n      const platformPreserve = preserve[platform];\n      for (const key of Object.keys(config.mods[platform] || {})) {\n        if (!platformPreserve?.includes(key)) {\n          // @ts-ignore\n          delete config.mods[platform][key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\n/**\n *\n * @param projectRoot\n * @param config\n */\nexport async function compileModsAsync(\n  config: ExportedConfig,\n  props: {\n    projectRoot: string;\n    platforms?: ModPlatform[];\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n  }\n): Promise<ExportedConfig> {\n  if (props.introspect === true) {\n    config = withIntrospectionBaseMods(config);\n  } else {\n    config = withDefaultBaseMods(config);\n  }\n  return await evalModsAsync(config, props);\n}\n\nfunction sortMods(commands: [string, any][], order: string[]): [string, any][] {\n  const allKeys = commands.map(([key]) => key);\n  const completeOrder = [...new Set([...order, ...allKeys])];\n  const sorted: [string, any][] = [];\n  while (completeOrder.length) {\n    const group = completeOrder.shift()!;\n    const commandSet = commands.find(([key]) => key === group);\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  }\n  return sorted;\n}\n\nconst orders: Record<string, string[]> = {\n  ios: [\n    // dangerous runs first\n    'dangerous',\n    // run the XcodeProject mod second because many plugins attempt to read from it.\n    'xcodeproj',\n  ],\n  android: ['dangerous'],\n};\n/**\n * A generic plugin compiler.\n *\n * @param config\n */\nexport async function evalModsAsync(\n  config: ExportedConfig,\n  {\n    projectRoot,\n    introspect,\n    platforms,\n    /**\n     * Throw errors when mods are missing providers.\n     * @default true\n     */\n    assertMissingModProviders,\n  }: {\n    projectRoot: string;\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n    platforms?: ModPlatform[];\n  }\n): Promise<ExportedConfig> {\n  for (const [platformName, platform] of Object.entries(config.mods ?? ({} as ModConfig))) {\n    if (platforms && !platforms.includes(platformName as any)) {\n      continue;\n    }\n\n    let entries = Object.entries(platform);\n    if (entries.length) {\n      // Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\n      entries = sortMods(entries, orders[platformName]!);\n\n      const platformProjectRoot = path.join(projectRoot, platformName);\n      const projectName =\n        platformName === 'ios' ? getHackyProjectName(projectRoot, config) : undefined;\n\n      for (const [modName, mod] of entries) {\n        const modRequest = {\n          projectRoot,\n          projectName,\n          platformProjectRoot,\n          platform: platformName as ModPlatform,\n          modName,\n          introspect: !!introspect,\n        };\n\n        if (!(mod as Mod).isProvider) {\n          // In strict mode, throw an error.\n          const errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n          if (assertMissingModProviders !== false) {\n            throw new PluginError(errorMessage, 'MISSING_PROVIDER');\n          } else {\n            if (config._internal?.isDebug) {\n              console.warn(errorMessage);\n            }\n            // In loose mode, just skip the mod entirely.\n            continue;\n          }\n        }\n\n        const results = await (mod as Mod)({\n          ...config,\n          modResults: null,\n          modRequest,\n        });\n\n        // Sanity check to help locate non compliant mods.\n        config = assertModResults(results, platformName, modName);\n        // @ts-ignore: data is added for modifications\n        delete config.modResults;\n        // @ts-ignore: info is added for modifications\n        delete config.modRequest;\n      }\n    }\n  }\n\n  return config;\n}\n"]}