"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAndroidIntrospectModFileProviders = exports.getAndroidModFileProviders = exports.withAndroidBaseMods = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const android_1 = require("../android");
const XML_1 = require("../utils/XML");
const createBaseMod_1 = require("./createBaseMod");
const { readFile, writeFile } = fs_1.promises;
const defaultProviders = {
    dangerous: createBaseMod_1.provider({
        getFilePath() {
            return '';
        },
        async read() {
            return { filePath: '', modResults: {} };
        },
        async write() { },
    }),
    // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`
    manifest: createBaseMod_1.provider({
        getFilePath({ modRequest: { platformProjectRoot } }) {
            return path_1.default.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');
        },
        async read(filePath) {
            return await android_1.Manifest.readAndroidManifestAsync(filePath);
        },
        async write(filePath, { modResults }) {
            await android_1.Manifest.writeAndroidManifestAsync(filePath, modResults);
        },
    }),
    // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`
    gradleProperties: createBaseMod_1.provider({
        getFilePath({ modRequest: { platformProjectRoot } }) {
            return path_1.default.join(platformProjectRoot, 'gradle.properties');
        },
        async read(filePath) {
            return android_1.Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));
        },
        async write(filePath, { modResults }) {
            await writeFile(filePath, android_1.Properties.propertiesListToString(modResults));
        },
    }),
    // Append a rule to supply strings.xml data to mods on `mods.android.strings`
    strings: createBaseMod_1.provider({
        getFilePath({ modRequest: { projectRoot } }) {
            return android_1.Strings.getProjectStringsXMLPathAsync(projectRoot);
        },
        async read(filePath) {
            return android_1.Resources.readResourcesXMLAsync({ path: filePath });
        },
        async write(filePath, { modResults }) {
            await XML_1.writeXMLAsync({ path: filePath, xml: modResults });
        },
    }),
    projectBuildGradle: createBaseMod_1.provider({
        getFilePath({ modRequest: { projectRoot } }) {
            return android_1.Paths.getProjectBuildGradleFilePath(projectRoot);
        },
        async read(filePath) {
            return android_1.Paths.getFileInfo(filePath);
        },
        async write(filePath, { modResults: { contents } }) {
            await writeFile(filePath, contents);
        },
    }),
    settingsGradle: createBaseMod_1.provider({
        getFilePath({ modRequest: { projectRoot } }) {
            return android_1.Paths.getSettingsGradleFilePath(projectRoot);
        },
        async read(filePath) {
            return android_1.Paths.getFileInfo(filePath);
        },
        async write(filePath, { modResults: { contents } }) {
            await writeFile(filePath, contents);
        },
    }),
    appBuildGradle: createBaseMod_1.provider({
        getFilePath({ modRequest: { projectRoot } }) {
            return android_1.Paths.getAppBuildGradleFilePath(projectRoot);
        },
        async read(filePath) {
            return android_1.Paths.getFileInfo(filePath);
        },
        async write(filePath, { modResults: { contents } }) {
            await writeFile(filePath, contents);
        },
    }),
    mainActivity: createBaseMod_1.provider({
        getFilePath({ modRequest: { projectRoot } }) {
            return android_1.Paths.getProjectFilePath(projectRoot, 'MainActivity');
        },
        async read(filePath) {
            return android_1.Paths.getFileInfo(filePath);
        },
        async write(filePath, { modResults: { contents } }) {
            await writeFile(filePath, contents);
        },
    }),
};
function withAndroidBaseMods(config, { providers, ...props } = {}) {
    return createBaseMod_1.withGeneratedBaseMods(config, {
        ...props,
        platform: 'android',
        providers: providers !== null && providers !== void 0 ? providers : getAndroidModFileProviders(),
    });
}
exports.withAndroidBaseMods = withAndroidBaseMods;
function getAndroidModFileProviders() {
    return defaultProviders;
}
exports.getAndroidModFileProviders = getAndroidModFileProviders;
function getAndroidIntrospectModFileProviders() {
    const createIntrospectionProvider = (modName, { fallbackContents }) => {
        const realProvider = defaultProviders[modName];
        return createBaseMod_1.provider({
            async getFilePath(...props) {
                try {
                    return await realProvider.getFilePath(...props);
                }
                catch {
                    // fallback to an empty string in introspection mode.
                    return '';
                }
            },
            async read(...props) {
                try {
                    return await realProvider.read(...props);
                }
                catch {
                    // fallback if a file is missing in introspection mode.
                    if (fallbackContents instanceof Function) {
                        return fallbackContents(...props);
                    }
                    return fallbackContents;
                }
            },
            async write() {
                // write nothing in introspection mode.
            },
        });
    };
    // dangerous should never be added
    return {
        manifest: createIntrospectionProvider('manifest', {
            fallbackContents(filePath, config) {
                var _a, _b;
                return {
                    manifest: {
                        $: {
                            'xmlns:android': 'http://schemas.android.com/apk/res/android',
                            package: (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.package) !== null && _b !== void 0 ? _b : 'com.placeholder.appid',
                        },
                        'uses-permission': [
                            {
                                $: {
                                    'android:name': 'android.permission.INTERNET',
                                },
                            },
                        ],
                        application: [
                            {
                                $: {
                                    'android:name': '.MainApplication',
                                    'android:label': '@string/app_name',
                                    'android:icon': '@mipmap/ic_launcher',
                                    'android:roundIcon': '@mipmap/ic_launcher_round',
                                    'android:allowBackup': 'false',
                                    'android:theme': '@style/AppTheme',
                                },
                                activity: [
                                    {
                                        $: {
                                            'android:name': '.MainActivity',
                                            'android:label': '@string/app_name',
                                            'android:configChanges': 'keyboard|keyboardHidden|orientation|screenSize|uiMode',
                                            'android:launchMode': 'singleTask',
                                            'android:windowSoftInputMode': 'adjustResize',
                                            'android:theme': '@style/Theme.App.SplashScreen',
                                        },
                                        'intent-filter': [
                                            {
                                                action: [
                                                    {
                                                        $: {
                                                            'android:name': 'android.intent.action.MAIN',
                                                        },
                                                    },
                                                ],
                                                category: [
                                                    {
                                                        $: {
                                                            'android:name': 'android.intent.category.LAUNCHER',
                                                        },
                                                    },
                                                ],
                                            },
                                        ],
                                    },
                                    {
                                        $: {
                                            'android:name': 'com.facebook.react.devsupport.DevSettingsActivity',
                                        },
                                    },
                                ],
                            },
                        ],
                    },
                };
            },
        }),
        gradleProperties: createIntrospectionProvider('gradleProperties', { fallbackContents: [] }),
        strings: createIntrospectionProvider('strings', {
            fallbackContents: { resources: {} },
        }),
        // projectBuildGradle: createIntrospectionProvider('projectBuildGradle', {
        //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,
        // }),
        // settingsGradle: createIntrospectionProvider('settingsGradle', {
        //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,
        // }),
        // appBuildGradle: createIntrospectionProvider('appBuildGradle', {
        //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,
        // }),
        // mainActivity: createIntrospectionProvider('mainActivity', {
        //   fallbackContents: {
        //     path: '',
        //     contents: '',
        //     language: 'java',
        //   } as Paths.ApplicationProjectFile,
        // }),
    };
}
exports.getAndroidIntrospectModFileProviders = getAndroidIntrospectModFileProviders;
//# sourceMappingURL=withAndroidBaseMods.js.map