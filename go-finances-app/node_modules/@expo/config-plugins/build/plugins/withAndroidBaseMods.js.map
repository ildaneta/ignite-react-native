{"version":3,"file":"withAndroidBaseMods.js","sourceRoot":"","sources":["../../src/plugins/withAndroidBaseMods.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Manifest, Paths, Properties, Resources, Strings } from '../android';\nimport { writeXMLAsync } from '../utils/XML';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath) {\n      return await Manifest.readAndroidManifestAsync(filePath);\n    },\n    async write(filePath, { modResults }) {\n      await Manifest.writeAndroidManifestAsync(filePath, modResults);\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath) {\n      return Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Strings.getProjectStringsXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n\nexport function getAndroidIntrospectModFileProviders(): Omit<\n  AndroidDefaultProviders,\n  // Get rid of mods that could potentially fail by being empty.\n  'dangerous' | 'projectBuildGradle' | 'settingsGradle' | 'appBuildGradle' | 'mainActivity'\n> {\n  const createIntrospectionProvider = (\n    modName: keyof typeof defaultProviders,\n    { fallbackContents }: { fallbackContents: any }\n  ) => {\n    const realProvider = defaultProviders[modName];\n    return provider<any>({\n      async getFilePath(...props) {\n        try {\n          return await realProvider.getFilePath(...props);\n        } catch {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n      },\n      async read(...props) {\n        try {\n          return await realProvider.read(...props);\n        } catch {\n          // fallback if a file is missing in introspection mode.\n          if (fallbackContents instanceof Function) {\n            return fallbackContents(...props);\n          }\n          return fallbackContents;\n        }\n      },\n      async write() {\n        // write nothing in introspection mode.\n      },\n    });\n  };\n\n  // dangerous should never be added\n  return {\n    manifest: createIntrospectionProvider('manifest', {\n      fallbackContents(filePath: string, config: ExportedConfig) {\n        return {\n          manifest: {\n            $: {\n              'xmlns:android': 'http://schemas.android.com/apk/res/android',\n              package: config.android?.package ?? 'com.placeholder.appid',\n            },\n            'uses-permission': [\n              {\n                $: {\n                  'android:name': 'android.permission.INTERNET',\n                },\n              },\n            ],\n            application: [\n              {\n                $: {\n                  'android:name': '.MainApplication',\n                  'android:label': '@string/app_name',\n                  'android:icon': '@mipmap/ic_launcher',\n                  'android:roundIcon': '@mipmap/ic_launcher_round',\n                  'android:allowBackup': 'false',\n                  'android:theme': '@style/AppTheme',\n                },\n                activity: [\n                  {\n                    $: {\n                      'android:name': '.MainActivity',\n                      'android:label': '@string/app_name',\n                      'android:configChanges':\n                        'keyboard|keyboardHidden|orientation|screenSize|uiMode',\n                      'android:launchMode': 'singleTask',\n                      'android:windowSoftInputMode': 'adjustResize',\n                      'android:theme': '@style/Theme.App.SplashScreen',\n                    },\n                    'intent-filter': [\n                      {\n                        action: [\n                          {\n                            $: {\n                              'android:name': 'android.intent.action.MAIN',\n                            },\n                          },\n                        ],\n                        category: [\n                          {\n                            $: {\n                              'android:name': 'android.intent.category.LAUNCHER',\n                            },\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                  {\n                    $: {\n                      'android:name': 'com.facebook.react.devsupport.DevSettingsActivity',\n                    },\n                  },\n                ],\n              },\n            ],\n          },\n        } as Manifest.AndroidManifest;\n      },\n    }),\n    gradleProperties: createIntrospectionProvider('gradleProperties', { fallbackContents: [] }),\n    strings: createIntrospectionProvider('strings', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    // projectBuildGradle: createIntrospectionProvider('projectBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // settingsGradle: createIntrospectionProvider('settingsGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // appBuildGradle: createIntrospectionProvider('appBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // mainActivity: createIntrospectionProvider('mainActivity', {\n    //   fallbackContents: {\n    //     path: '',\n    //     contents: '',\n    //     language: 'java',\n    //   } as Paths.ApplicationProjectFile,\n    // }),\n  };\n}\n"]}