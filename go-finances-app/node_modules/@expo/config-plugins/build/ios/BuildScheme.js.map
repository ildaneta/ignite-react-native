{"version":3,"file":"BuildScheme.js","sourceRoot":"","sources":["../../src/ios/BuildScheme.ts"],"names":[],"mappings":";;;AAAA,sCAA4C;AAC5C,mCAA2D;AA0B3D,SAAgB,uBAAuB,CAAC,WAAmB;IACzD,OAAO,uBAAe,CAAC,WAAW,CAAC,CAAC;AACtC,CAAC;AAFD,0DAEC;AAED,KAAK,UAAU,eAAe,CAC5B,WAAmB,EACnB,MAAc;IAEd,MAAM,cAAc,GAAG,uBAAe,CAAC,WAAW,CAAC,CAAC;IACpD,MAAM,EAAE,GAAG,IAAI,MAAM,CAAC,IAAI,MAAM,WAAW,EAAE,GAAG,CAAC,CAAC;IAClD,MAAM,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,IAAI,UAAU,EAAE;QACd,OAAQ,CAAC,MAAM,kBAAY,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAsC,CAAC;KACzF;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,WAAW,MAAM,mDAAmD,CAAC,CAAC;KACvF;AACH,CAAC;AAEM,KAAK,UAAU,sCAAsC,CAC1D,WAAmB,EACnB,MAAc;;IAEd,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC7D,MAAM,gBAAgB,GACpB,MAAA,MAAA,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,0CAAE,WAAW,0CAAG,CAAC,CAAC,0CAAE,kBAAkB,0CAAG,CAAC,CAAC,0CAAE,gBAAgB,CAAC;IACjF,MAAM,UAAU,GACd,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,MAAK,CAAC;QAC5B,CAAC,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,gBAAgB,CACd,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,CAAC,KAAK,CAAC,EAAE;;YAC7B,OAAO,MAAA,MAAA,MAAA,MAAA,KAAK,CAAC,kBAAkB,0CAAG,CAAC,CAAC,0CAAG,GAAG,CAAC,0CAAE,aAAa,0CAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/E,CAAC,CAAC,CACH,CAAC;IACR,IAAI,CAAC,UAAU,EAAE;QACf,MAAM,IAAI,KAAK,CAAC,GAAG,MAAM,iCAAiC,CAAC,CAAC;KAC7D;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAnBD,wFAmBC;AAEM,KAAK,UAAU,0CAA0C,CAC9D,WAAmB,EACnB,MAAc;;IAEd,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC7D,MAAM,kBAAkB,GAAG,MAAA,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,0CAAE,aAAa,0CAAG,CAAC,CAAC,0CAAG,GAAG,CAAC,0CAAE,kBAAkB,CAAC;IAC5F,IAAI,CAAC,kBAAkB,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,GAAG,MAAM,iCAAiC,CAAC,CAAC;KAC7D;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAVD,gGAUC;AAED,SAAS,gBAAgB,CAAC,KAA4B;;IACpD,OAAO,MAAA,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,kBAAkB,0CAAG,CAAC,CAAC,0CAAG,GAAG,CAAC,0CAAE,aAAa,CAAC;AAC9D,CAAC","sourcesContent":["import { readXMLAsync } from '../utils/XML';\nimport { findSchemeNames, findSchemePaths } from './Paths';\n\ninterface SchemeXML {\n  Scheme?: {\n    BuildAction?: {\n      BuildActionEntries?: {\n        BuildActionEntry?: BuildActionEntryType[];\n      }[];\n    }[];\n    ArchiveAction?: {\n      $?: {\n        buildConfiguration?: string;\n      };\n    }[];\n  };\n}\n\ninterface BuildActionEntryType {\n  BuildableReference?: {\n    $?: {\n      BlueprintName?: string;\n      BuildableName?: string;\n    };\n  }[];\n}\n\nexport function getSchemesFromXcodeproj(projectRoot: string): string[] {\n  return findSchemeNames(projectRoot);\n}\n\nasync function readSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<SchemeXML | undefined> {\n  const allSchemePaths = findSchemePaths(projectRoot);\n  const re = new RegExp(`/${scheme}.xcscheme`, 'i');\n  const schemePath = allSchemePaths.find(i => re.exec(i));\n  if (schemePath) {\n    return ((await readXMLAsync({ path: schemePath })) as unknown) as SchemeXML | undefined;\n  } else {\n    throw new Error(`scheme '${scheme}' does not exist, make sure it's marked as shared`);\n  }\n}\n\nexport async function getApplicationTargetNameForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildActionEntry =\n    schemeXML?.Scheme?.BuildAction?.[0]?.BuildActionEntries?.[0]?.BuildActionEntry;\n  const targetName =\n    buildActionEntry?.length === 1\n      ? getBlueprintName(buildActionEntry[0])\n      : getBlueprintName(\n          buildActionEntry?.find(entry => {\n            return entry.BuildableReference?.[0]?.['$']?.BuildableName?.endsWith('.app');\n          })\n        );\n  if (!targetName) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return targetName;\n}\n\nexport async function getArchiveBuildConfigurationForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildConfiguration = schemeXML?.Scheme?.ArchiveAction?.[0]?.['$']?.buildConfiguration;\n  if (!buildConfiguration) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return buildConfiguration;\n}\n\nfunction getBlueprintName(entry?: BuildActionEntryType): string | undefined {\n  return entry?.BuildableReference?.[0]?.['$']?.BlueprintName;\n}\n"]}