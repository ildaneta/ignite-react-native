{"version":3,"file":"Maps.js","sourceRoot":"","sources":["../../src/ios/Maps.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin, InfoPlist } from '../Plugin.types';\nimport { createInfoPlistPlugin, withAppDelegate } from '../plugins/ios-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { mergeContents, MergeResults, removeContents } from '../utils/generateCode';\nimport { resolvePackageRootFolder } from '../utils/resolvePackageRootFolder';\n\nexport const MATCH_INIT = /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])/g;\n\nconst withGoogleMapsKey = createInfoPlistPlugin(setGoogleMapsApiKey, 'withGoogleMapsKey');\n\nexport const withMaps: ConfigPlugin = config => {\n  config = withGoogleMapsKey(config);\n\n  const apiKey = getGoogleMapsApiKey(config);\n  // Technically adds react-native-maps (Apple maps) and google maps.\n  config = withMapsCocoaPods(config, { useGoogleMaps: !!apiKey });\n  // Adds/Removes AppDelegate setup for Google Maps API on iOS\n  config = withGoogleMapsAppDelegate(config, { apiKey });\n\n  return config;\n};\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMapsApiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function addGoogleMapsAppDelegateImport(src: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    '#import <GoogleMaps/GoogleMaps.h>',\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateImport(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-import',\n    src,\n  });\n}\n\nexport function addGoogleMapsAppDelegateInit(src: string, apiKey: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    `  [GMSServices provideAPIKey:@\"${apiKey}\"];`,\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-init',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateInit(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-init',\n    src,\n  });\n}\n\n/**\n * @param src\n * @param useGoogleMaps\n * @param googleMapsPath '../node_modules/react-native-maps'\n * @returns\n */\nexport function addMapsCocoaPods(src: string, googleMapsPath: string): MergeResults {\n  return mergeContents({\n    tag: 'react-native-maps',\n    src,\n    newSrc: `  pod 'react-native-google-maps', path: '${googleMapsPath}'`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#',\n  });\n}\n\nexport function removeMapsCocoaPods(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps',\n    src,\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot: string): string | null {\n  return resolvePackageRootFolder(projectRoot, 'react-native-maps');\n}\n\nconst withMapsCocoaPods: ConfigPlugin<{ useGoogleMaps: boolean }> = (config, { useGoogleMaps }) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const filePath = path.join(config.modRequest.platformProjectRoot, 'Podfile');\n      const contents = await fs.readFile(filePath, 'utf-8');\n      let results: MergeResults;\n      // Only add the block if react-native-maps is installed in the project (best effort).\n      // Generally prebuild runs after a yarn install so this should always work as expected.\n      const googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      if (googleMapsPath && useGoogleMaps) {\n        // Make the pod path relative to the ios folder.\n        const googleMapsPodPath = path.relative(\n          config.modRequest.platformProjectRoot,\n          googleMapsPath\n        );\n        try {\n          results = addMapsCocoaPods(contents, googleMapsPodPath);\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        // If the package is no longer installed, then remove the block.\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        await fs.writeFile(filePath, results.contents);\n      }\n      return config;\n    },\n  ]);\n};\n\nconst withGoogleMapsAppDelegate: ConfigPlugin<{ apiKey: string | null }> = (config, { apiKey }) => {\n  return withAppDelegate(config, config => {\n    if (config.modResults.language === 'objc') {\n      if (apiKey && isReactNativeMapsInstalled(config.modRequest.projectRoot)) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(\n            config.modResults.contents\n          ).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(\n            config.modResults.contents,\n            apiKey\n          ).contents;\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(\n          config.modResults.contents\n        ).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(\n          config.modResults.contents\n        ).contents;\n      }\n    } else {\n      throw new Error('Cannot setup Google Maps because the AppDelegate is not Objective C');\n    }\n    return config;\n  });\n};\n"]}