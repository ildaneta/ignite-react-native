{"version":3,"file":"Updates.js","sourceRoot":"","sources":["../../src/ios/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\ntype ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n}\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug'>,\n  username: string | null\n): string | null {\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion'>\n): string | null {\n  return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>) {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): 'NEVER' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, config => {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersion(config);\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    buildPhase => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersion(config);\n  const expectedSdkVersion = getSDKVersion(config);\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  return (\n    currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === expectedRuntimeVersion\n  );\n}\n"]}