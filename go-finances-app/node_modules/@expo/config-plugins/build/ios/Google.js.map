{"version":3,"file":"Google.js","sourceRoot":"","sources":["../../src/ios/Google.ts"],"names":[],"mappings":";;;;;;AACA,wDAA0B;AAC1B,gDAAwB;AAIxB,wDAAiF;AAEjF,mCAAwC;AACxC,qCAAwC;AACxC,iDAA2E;AAE9D,QAAA,UAAU,GAAG,mCAAqB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;AAExE,MAAM,sBAAsB,GAAiB,MAAM,CAAC,EAAE;IAC3D,OAAO,8BAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACvC,MAAM,CAAC,UAAU,GAAG,qBAAqB,CAAC,MAAM,EAAE;YAChD,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW;YAC1C,OAAO,EAAE,MAAM,CAAC,UAAU;SAC3B,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AARW,QAAA,sBAAsB,0BAQjC;AAEF,SAAgB,+BAA+B,CAAC,MAA+B;;IAC7E,OAAO,MAAA,MAAA,MAAA,MAAA,MAAM,CAAC,GAAG,0CAAE,MAAM,0CAAE,YAAY,0CAAE,gBAAgB,mCAAI,IAAI,CAAC;AACpE,CAAC;AAFD,0EAEC;AAED,SAAgB,qBAAqB,CAAC,MAA+B;;IACnE,OAAO,MAAA,MAAA,MAAM,CAAC,GAAG,0CAAE,kBAAkB,mCAAI,IAAI,CAAC;AAChD,CAAC;AAFD,sDAEC;AAED,SAAgB,+BAA+B,CAC7C,MAA+B,EAC/B,SAAoB;IAEpB,MAAM,gBAAgB,GAAG,+BAA+B,CAAC,MAAM,CAAC,CAAC;IAEjE,IAAI,gBAAgB,KAAK,IAAI,EAAE;QAC7B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,qBAAY,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;AACnD,CAAC;AAXD,0EAWC;AAED,SAAgB,eAAe,CAAC,MAA+B,EAAE,SAAoB;IACnF,SAAS,GAAG,+BAA+B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC/D,OAAO,SAAS,CAAC;AACnB,CAAC;AAHD,0CAGC;AAED,SAAgB,qBAAqB,CACnC,MAA+B,EAC/B,EAAE,WAAW,EAAE,OAAO,EAAkD;IAExE,MAAM,8BAA8B,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;IACrE,IAAI,8BAA8B,KAAK,IAAI,EAAE;QAC3C,OAAO,OAAO,CAAC;KAChB;IAED,MAAM,qBAAqB,GAAG,cAAI,CAAC,OAAO,CAAC,WAAW,EAAE,8BAA8B,CAAC,CAAC;IACxF,kBAAE,CAAC,YAAY,CACb,qBAAqB,EACrB,cAAI,CAAC,IAAI,CAAC,qBAAa,CAAC,WAAW,CAAC,EAAE,0BAA0B,CAAC,CAClE,CAAC;IAEF,MAAM,WAAW,GAAG,0BAAc,CAAC,WAAW,CAAC,CAAC;IAChD,MAAM,aAAa,GAAG,GAAG,WAAW,2BAA2B,CAAC;IAChE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;QACnC,OAAO,GAAG,kCAAsB,CAAC;YAC/B,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE,WAAW;YACtB,OAAO;YACP,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;KACJ;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AA1BD,sDA0BC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createInfoPlistPlugin, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle = createInfoPlistPlugin(setGoogleConfig, 'withGoogle');\n\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getGoogleSignInReservedClientId(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(config: Pick<ExpoConfig, 'ios'>, infoPlist: InfoPlist): InfoPlist {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n    });\n  }\n  return project;\n}\n"]}