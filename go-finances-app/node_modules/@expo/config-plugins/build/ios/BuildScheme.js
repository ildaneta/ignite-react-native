"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getArchiveBuildConfigurationForSchemeAsync = exports.getApplicationTargetNameForSchemeAsync = exports.getSchemesFromXcodeproj = void 0;
const XML_1 = require("../utils/XML");
const Paths_1 = require("./Paths");
function getSchemesFromXcodeproj(projectRoot) {
    return Paths_1.findSchemeNames(projectRoot);
}
exports.getSchemesFromXcodeproj = getSchemesFromXcodeproj;
async function readSchemeAsync(projectRoot, scheme) {
    const allSchemePaths = Paths_1.findSchemePaths(projectRoot);
    const re = new RegExp(`/${scheme}.xcscheme`, 'i');
    const schemePath = allSchemePaths.find(i => re.exec(i));
    if (schemePath) {
        return (await XML_1.readXMLAsync({ path: schemePath }));
    }
    else {
        throw new Error(`scheme '${scheme}' does not exist, make sure it's marked as shared`);
    }
}
async function getApplicationTargetNameForSchemeAsync(projectRoot, scheme) {
    var _a, _b, _c, _d, _e;
    const schemeXML = await readSchemeAsync(projectRoot, scheme);
    const buildActionEntry = (_e = (_d = (_c = (_b = (_a = schemeXML === null || schemeXML === void 0 ? void 0 : schemeXML.Scheme) === null || _a === void 0 ? void 0 : _a.BuildAction) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.BuildActionEntries) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.BuildActionEntry;
    const targetName = (buildActionEntry === null || buildActionEntry === void 0 ? void 0 : buildActionEntry.length) === 1
        ? getBlueprintName(buildActionEntry[0])
        : getBlueprintName(buildActionEntry === null || buildActionEntry === void 0 ? void 0 : buildActionEntry.find(entry => {
            var _a, _b, _c, _d;
            return (_d = (_c = (_b = (_a = entry.BuildableReference) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b['$']) === null || _c === void 0 ? void 0 : _c.BuildableName) === null || _d === void 0 ? void 0 : _d.endsWith('.app');
        }));
    if (!targetName) {
        throw new Error(`${scheme}.xcscheme seems to be corrupted`);
    }
    return targetName;
}
exports.getApplicationTargetNameForSchemeAsync = getApplicationTargetNameForSchemeAsync;
async function getArchiveBuildConfigurationForSchemeAsync(projectRoot, scheme) {
    var _a, _b, _c, _d;
    const schemeXML = await readSchemeAsync(projectRoot, scheme);
    const buildConfiguration = (_d = (_c = (_b = (_a = schemeXML === null || schemeXML === void 0 ? void 0 : schemeXML.Scheme) === null || _a === void 0 ? void 0 : _a.ArchiveAction) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c['$']) === null || _d === void 0 ? void 0 : _d.buildConfiguration;
    if (!buildConfiguration) {
        throw new Error(`${scheme}.xcscheme seems to be corrupted`);
    }
    return buildConfiguration;
}
exports.getArchiveBuildConfigurationForSchemeAsync = getArchiveBuildConfigurationForSchemeAsync;
function getBlueprintName(entry) {
    var _a, _b, _c;
    return (_c = (_b = (_a = entry === null || entry === void 0 ? void 0 : entry.BuildableReference) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b['$']) === null || _c === void 0 ? void 0 : _c.BlueprintName;
}
//# sourceMappingURL=BuildScheme.js.map