{"version":3,"file":"BundleIdentifier.js","sourceRoot":"","sources":["../../src/ios/BundleIdentifier.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs-extra';\nimport xcode, { XCBuildConfiguration } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { InfoPlist } from './IosConfig.types';\nimport { getAllInfoPlistPaths, getAllPBXProjectPaths, getPBXProjectPath } from './Paths';\nimport { findFirstNativeTarget, findNativeTargetByName } from './Target';\nimport {\n  ConfigurationSectionEntry,\n  getBuildConfigurationForListIdAndName,\n  getBuildConfigurationsForListId,\n} from './utils/Xcodeproj';\n\nexport const withBundleIdentifier: ConfigPlugin<{ bundleIdentifier?: string }> = (\n  config,\n  { bundleIdentifier }\n) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const bundleId = bundleIdentifier ?? config.ios?.bundleIdentifier;\n      assert(\n        bundleId,\n        '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.'\n      );\n      await setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId!);\n      return config;\n    },\n  ]);\n};\n\nfunction getBundleIdentifier(config: Pick<ExpoConfig, 'ios'>): string | null {\n  return config.ios?.bundleIdentifier ?? null;\n}\n\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\nfunction setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist {\n  const bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleIdentifier: bundleIdentifier,\n  };\n}\n\n/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\nfunction getBundleIdentifierFromPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  let pbxprojPath: string;\n  try {\n    pbxprojPath = getPBXProjectPath(projectRoot);\n  } catch {\n    return null;\n  }\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const [, nativeTarget] = targetName\n    ? findNativeTargetByName(project, targetName)\n    : findFirstNativeTarget(project);\n  const [, xcBuildConfiguration] = getBuildConfigurationForListIdAndName(project, {\n    configurationListId: nativeTarget.buildConfigurationList,\n    buildConfiguration,\n  });\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\n\nfunction getProductBundleIdentifierFromBuildConfiguration(\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    const bundleIdentifier =\n      bundleIdentifierRaw[0] === '\"' ? bundleIdentifierRaw.slice(1, -1) : bundleIdentifierRaw;\n    // it's possible to use interpolation for the bundle identifier\n    // the most common case is when the last part of the id is set to `$(PRODUCT_NAME:rfc1034identifier)`\n    // in this case, PRODUCT_NAME should be replaced with its value\n    // the `rfc1034identifier` modifier replaces all non-alphanumeric characters with dashes\n    const bundleIdentifierParts = bundleIdentifier.split('.');\n    if (\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] ===\n        '$(PRODUCT_NAME:rfc1034identifier)' &&\n      xcBuildConfiguration.buildSettings.PRODUCT_NAME\n    ) {\n      bundleIdentifierParts[\n        bundleIdentifierParts.length - 1\n      ] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction updateBundleIdentifierForPbxproj(\n  pbxprojPath: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n        return;\n      }\n\n      item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n      if (updateProductName) {\n        const productName = bundleIdentifier.split('.').pop();\n        if (!productName?.includes('$')) {\n          item.buildSettings.PRODUCT_NAME = productName;\n        }\n      }\n    }\n  );\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction setBundleIdentifierForPbxproj(\n  projectRoot: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  // Get all pbx projects in the ${projectRoot}/ios directory\n  let pbxprojPaths: string[] = [];\n  try {\n    pbxprojPaths = getAllPBXProjectPaths(projectRoot);\n  } catch {}\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\n/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot: string): void {\n  const infoPlistPaths = getAllInfoPlistPaths(projectRoot);\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath: string): void {\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nexport {\n  getBundleIdentifier,\n  setBundleIdentifier,\n  getBundleIdentifierFromPbxproj,\n  updateBundleIdentifierForPbxproj,\n  setBundleIdentifierForPbxproj,\n  resetAllPlistBundleIdentifiers,\n  resetPlistBundleIdentifier,\n};\n"]}