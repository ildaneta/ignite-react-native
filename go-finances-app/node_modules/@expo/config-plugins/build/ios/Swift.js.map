{"version":3,"file":"Swift.js","sourceRoot":"","sources":["../../src/ios/Swift.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { getAppDelegate, getSourceRoot } from './Paths';\nimport { withBuildSourceFile } from './XcodeProjectFile';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nconst templateBridgingHeader = `//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n`;\n\n/**\n * Ensure a Swift bridging header is created for the project.\n * This helps fix problems related to using modules that are written in Swift (lottie, FBSDK).\n *\n * 1. Ensures the file exists given the project path.\n * 2. Writes the file and links to Xcode as a resource file.\n * 3. Sets the build configuration `SWIFT_OBJC_BRIDGING_HEADER = [PROJECT_NAME]-Bridging-Header.h`\n */\nexport const withSwiftBridgingHeader: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot,\n    });\n    return config;\n  });\n};\n\nexport function ensureSwiftBridgingHeaderSetup({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}) {\n  // Only create a bridging header if using objective-c\n  if (shouldCreateSwiftBridgingHeader({ projectRoot, project })) {\n    const projectName = getProjectName(projectRoot);\n    const bridgingHeader = createBridgingHeaderFileName(projectName);\n    // Ensure a bridging header is created in the Xcode project.\n    project = createBridgingHeaderFile({\n      project,\n      projectName,\n      projectRoot,\n      bridgingHeader,\n    });\n    // Designate the newly created file as the Swift bridging header in the Xcode project.\n    project = linkBridgingHeaderFile({\n      project,\n      bridgingHeader: path.join(projectName, bridgingHeader),\n    });\n  }\n  return project;\n}\n\nfunction shouldCreateSwiftBridgingHeader({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}): boolean {\n  // Only create a bridging header if the project is using in Objective C (AppDelegate is written in Objc).\n  const isObjc = getAppDelegate(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({ project });\n}\n\n/**\n * @returns String matching the default name used when Xcode automatically creates a bridging header file.\n */\nfunction createBridgingHeaderFileName(projectName: string): string {\n  return `${projectName}-Bridging-Header.h`;\n}\n\nexport function getDesignatedSwiftBridgingHeaderFileReference({\n  project,\n}: {\n  project: XcodeProject;\n}): string | null {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      if (\n        typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' &&\n        buildSettings.SWIFT_OBJC_BRIDGING_HEADER\n      ) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n *\n * @param bridgingHeader The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`\n * @returns\n */\nexport function linkBridgingHeaderFile({\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  bridgingHeader: string;\n}): XcodeProject {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n\n  return project;\n}\n\nexport function createBridgingHeaderFile({\n  projectRoot,\n  projectName,\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  projectRoot: string;\n  bridgingHeader: string;\n}): XcodeProject {\n  const bridgingHeaderProjectPath = path.join(getSourceRoot(projectRoot), bridgingHeader);\n  if (!fs.existsSync(bridgingHeaderProjectPath)) {\n    // Create the file\n    fs.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n\n  // This is non-standard, Xcode generates the bridging header in `/ios` which is kinda annoying.\n  // Instead, this'll generate the default header in the application code folder `/ios/myproject/`.\n  const filePath = `${projectName}/${bridgingHeader}`;\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addResourceFileToGroup({\n      filepath: filePath,\n      groupName: projectName,\n      project,\n      // Not sure why, but this is how Xcode generates it.\n      isBuildFile: false,\n    });\n  }\n  return project;\n}\n\nexport const withNoopSwiftFile: ConfigPlugin = config => {\n  return withBuildSourceFile(config, {\n    filePath: 'noop-file.swift',\n    contents: [\n      '//',\n      '// @generated',\n      '// A blank Swift file must be created for native modules with Swift files to work correctly.',\n      '//',\n      '',\n    ].join('\\n'),\n  });\n};\n"]}