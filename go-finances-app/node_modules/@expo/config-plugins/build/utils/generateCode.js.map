{"version":3,"file":"generateCode.js","sourceRoot":"","sources":["../../src/utils/generateCode.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Get line indexes for the generated section of a file.\n *\n * @param src\n */\nimport crypto from 'crypto';\n\nfunction getGeneratedSectionIndexes(\n  src: string,\n  tag: string\n): { contents: string[]; start: number; end: number } {\n  const contents = src.split('\\n');\n  const start = contents.findIndex(line => line.includes(`@generated begin ${tag}`));\n  const end = contents.findIndex(line => line.includes(`@generated end ${tag}`));\n\n  return { contents, start, end };\n}\n\nexport type MergeResults = {\n  contents: string;\n  didClear: boolean;\n  didMerge: boolean;\n};\n\n/**\n * Merge the contents of two files together and add a generated header.\n *\n * @param src contents of the original file\n * @param newSrc new contents to merge into the original file\n * @param identifier used to update and remove merges\n * @param anchor regex to where the merge should begin\n * @param offset line offset to start merging at (<1 for behind the anchor)\n * @param comment comment style `//` or `#`\n */\nexport function mergeContents({\n  src,\n  newSrc,\n  tag,\n  anchor,\n  offset,\n  comment,\n}: {\n  src: string;\n  newSrc: string;\n  tag: string;\n  anchor: string | RegExp;\n  offset: number;\n  comment: string;\n}): MergeResults {\n  const header = createGeneratedHeaderComment(newSrc, tag, comment);\n  if (!src.includes(header)) {\n    // Ensure the old generated contents are removed.\n    const sanitizedTarget = removeGeneratedContents(src, tag);\n    return {\n      contents: addLines(sanitizedTarget ?? src, anchor, offset, [\n        header,\n        ...newSrc.split('\\n'),\n        `${comment} @generated end ${tag}`,\n      ]),\n      didMerge: true,\n      didClear: !!sanitizedTarget,\n    };\n  }\n  return { contents: src, didClear: false, didMerge: false };\n}\n\nexport function removeContents({ src, tag }: { src: string; tag: string }): MergeResults {\n  // Ensure the old generated contents are removed.\n  const sanitizedTarget = removeGeneratedContents(src, tag);\n  return {\n    contents: sanitizedTarget ?? src,\n    didMerge: false,\n    didClear: !!sanitizedTarget,\n  };\n}\n\nfunction addLines(content: string, find: string | RegExp, offset: number, toAdd: string[]) {\n  const lines = content.split('\\n');\n\n  let lineIndex = lines.findIndex(line => line.match(find));\n  if (lineIndex < 0) {\n    const error = new Error(`Failed to match \"${find}\" in contents:\\n${content}`);\n    // @ts-ignore\n    error.code = 'ERR_NO_MATCH';\n    throw error;\n  }\n  for (const newLine of toAdd) {\n    lines.splice(lineIndex + offset, 0, newLine);\n    lineIndex++;\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Removes the generated section from a file, returns null when nothing can be removed.\n * This sways heavily towards not removing lines unless it's certain that modifications were not made manually.\n *\n * @param src\n */\nexport function removeGeneratedContents(src: string, tag: string): string | null {\n  const { contents, start, end } = getGeneratedSectionIndexes(src, tag);\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    // TODO: We could in theory check that the contents we're removing match the hash used in the header,\n    // this would ensure that we don't accidentally remove lines that someone added or removed from the generated section.\n    return contents.join('\\n');\n  }\n  return null;\n}\n\nexport function createGeneratedHeaderComment(\n  contents: string,\n  tag: string,\n  comment: string\n): string {\n  const hashKey = createHash(contents);\n\n  // Everything after the `${tag} ` is unversioned and can be freely modified without breaking changes.\n  return `${comment} @generated begin ${tag} - expo prebuild (DO NOT MODIFY) ${hashKey}`;\n}\n\nexport function createHash(src: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  const hash = crypto.createHash('sha1').update(src).digest('hex');\n  return `sync-${hash}`;\n}\n"]}