{"version":3,"file":"modules.js","sourceRoot":"","sources":["../../src/utils/modules.ts"],"names":[],"mappings":";;;;;;AAAA,4CAAoB;AAEpB;;;;GAIG;AACH,KAAK,UAAU,SAAS,CAAC,IAAY;IACnC,IAAI;QACF,OAAO,MAAM,YAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACrC;IAAC,MAAM;QACN,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,IAAY;;IAChD,OAAO,MAAA,MAAA,CAAC,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC,0CAAE,MAAM,EAAE,mCAAI,KAAK,CAAC;AACpD,CAAC;AAFD,0CAEC;AAEM,KAAK,UAAU,oBAAoB,CAAC,IAAY;;IACrD,OAAO,MAAA,MAAA,CAAC,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC,0CAAE,WAAW,EAAE,mCAAI,KAAK,CAAC;AACzD,CAAC;AAFD,oDAEC;AAED,SAAgB,UAAU,CAAC,IAAY;IACrC,IAAI;QACF,OAAO,YAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;KACnC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAND,gCAMC","sourcesContent":["import fs from 'fs';\n\n/**\n * A non-failing version of async FS stat.\n *\n * @param file\n */\nasync function statAsync(file: string): Promise<fs.Stats | null> {\n  try {\n    return await fs.promises.stat(file);\n  } catch {\n    return null;\n  }\n}\n\nexport async function fileExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isFile() ?? false;\n}\n\nexport async function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isDirectory() ?? false;\n}\n\nexport function fileExists(file: string): boolean {\n  try {\n    return fs.statSync(file).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n"]}