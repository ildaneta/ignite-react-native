{"version":3,"file":"IntentFilters.js","sourceRoot":"","sources":["../../src/android/IntentFilters.ts"],"names":[],"mappings":";;;AACA,mCAAgC;AAEhC,gEAAyE;AACzE,yCAAqE;AAGrE,oFAAoF;AAEvE,QAAA,wBAAwB,GAAG,6CAA2B,CACjE,uBAAuB,EACvB,0BAA0B,CAC3B,CAAC;AAEF,SAAgB,gBAAgB,CAAC,MAAmC;;IAClE,OAAO,MAAA,MAAA,MAAM,CAAC,OAAO,0CAAE,aAAa,mCAAI,EAAE,CAAC;AAC7C,CAAC;AAFD,4CAEC;AAEM,KAAK,UAAU,uBAAuB,CAC3C,MAAmC,EACnC,eAAgC;;IAEhC,MAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC/C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;QACzB,OAAO,eAAe,CAAC;KACxB;IAED,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACrE,MAAM,MAAM,GAAG,IAAI,eAAM,EAAE,CAAC;IAC5B,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;IAE5E,MAAM,YAAY,GAAG,iCAAsB,CAAC,eAAe,CAAC,CAAC;IAE7D,YAAY,CAAC,eAAe,CAAC,GAAG,MAAA,YAAY,CAAC,eAAe,CAAC,0CAAE,MAAM,CACnE,iBAAiB,CAAC,eAAe,CAAC,CACnC,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC;AApBD,0DAoBC;AAED,SAAwB,mBAAmB,CAAC,aAAmC;IAC7E,4CAA4C;IAC5C,IAAI;IACJ,qBAAqB;IACrB,mCAAmC;IACnC,oCAAoC;IACpC,EAAE;IACF,0DAA0D;IAC1D,EAAE;IACF,iEAAiE;IACjE,mEAAmE;IACnE,uBAAuB;IACvB,QAAQ;IACR,IAAI;IACJ,OAAO,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QACtC,MAAM,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,EAAE,CAAC;QAE/E,OAAO,iBAAiB,UAAU;QAC9B,sBAAsB,CAAC,YAAY,CAAC,IAAI,CAAC;oDACG,YAAY,CAAC,MAAM;QAC/D,0BAA0B,CAAC,YAAY,CAAC,QAAQ,CAAC;qBACpC,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC;AAvBD,sCAuBC;AAED,SAAS,8BAA8B,CAAC,QAAkC,EAAE;IAC1E,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAChD,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,KAAK,KAAK,GAAG,CAAC,CAAC;KAC3C;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;AAED,SAAS,sBAAsB,CAC7B,IAA4D;IAE5D,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SACzC,MAAM,CAAC,OAAO,CAAC;SACf,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,8BAA8B,CAAC,KAAK,CAAC,IAAI,CAAC;SAChE,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AAED,SAAS,0BAA0B,CAAC,QAA4B;IAC9D,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;SACrD,MAAM,CAAC,OAAO,CAAC;SACf,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,mDAAmD,GAAG,KAAK,CAAC;SACvE,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC","sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\nimport { Parser } from 'xml2js';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n// TODO: make it so intent filters aren't written again if you run the command again\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport async function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): Promise<AndroidManifest> {\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  const intentFiltersXML = renderIntentFilters(intentFilters).join('');\n  const parser = new Parser();\n  const intentFiltersJSON = await parser.parseStringPromise(intentFiltersXML);\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    intentFiltersJSON['intent-filter']\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(intentFilters: AndroidIntentFilters): string[] {\n  // returns an array of <intent-filter> tags:\n  // [\n  //   `<intent-filter>\n  //     <data android:scheme=\"exp\"/>\n  //     <data android:scheme=\"exps\"/>\n  //\n  //     <action android:name=\"android.intent.action.VIEW\"/>\n  //\n  //     <category android:name=\"android.intent.category.DEFAULT\"/>\n  //     <category android:name=\"android.intent.category.BROWSABLE\"/>\n  //   </intent-filter>`,\n  //   ...\n  // ]\n  return intentFilters.map(intentFilter => {\n    const autoVerify = intentFilter.autoVerify ? ' android:autoVerify=\"true\"' : '';\n\n    return `<intent-filter${autoVerify}>\n      ${renderIntentFilterData(intentFilter.data)}\n      <action android:name=\"android.intent.action.${intentFilter.action}\"/>\n      ${renderIntentFilterCategory(intentFilter.category)}\n    </intent-filter>`;\n  });\n}\n\nfunction renderIntentFilterDatumEntries(datum: AndroidIntentFiltersData = {}): string {\n  const entries: string[] = [];\n  for (const [key, value] of Object.entries(datum)) {\n    entries.push(`android:${key}=\"${value}\"`);\n  }\n  return entries.join(' ');\n}\n\nfunction renderIntentFilterData(\n  data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]\n): string {\n  return (Array.isArray(data) ? data : [data])\n    .filter(Boolean)\n    .map(datum => `<data ${renderIntentFilterDatumEntries(datum)}/>`)\n    .join('\\n');\n}\n\nfunction renderIntentFilterCategory(category?: string | string[]): string {\n  return (Array.isArray(category) ? category : [category])\n    .filter(Boolean)\n    .map(cat => `<category android:name=\"android.intent.category.${cat}\"/>`)\n    .join('\\n');\n}\n"]}