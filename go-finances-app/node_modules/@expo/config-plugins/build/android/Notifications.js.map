{"version":3,"file":"Notifications.js","sourceRoot":"","sources":["../../src/android/Notifications.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { writeXMLAsync } from '../utils/XML';\nimport * as Colors from './Colors';\nimport { ANDROID_RES_PATH, dpiValues } from './Icon';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\n\nconst BASELINE_PIXEL_SIZE = 24;\nexport const META_DATA_NOTIFICATION_ICON = 'expo.modules.notifications.default_notification_icon';\nexport const META_DATA_NOTIFICATION_ICON_COLOR =\n  'expo.modules.notifications.default_notification_color';\nexport const NOTIFICATION_ICON = 'notification_icon';\nexport const NOTIFICATION_ICON_RESOURCE = `@drawable/${NOTIFICATION_ICON}`;\nexport const NOTIFICATION_ICON_COLOR = 'notification_icon_color';\nexport const NOTIFICATION_ICON_COLOR_RESOURCE = `@color/${NOTIFICATION_ICON_COLOR}`;\n\nexport const withNotificationIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setNotificationIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationIconColor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setNotificationIconColorAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationManifest = createAndroidManifestPlugin(\n  setNotificationConfigAsync,\n  'withNotificationManifest'\n);\n\nexport function getNotificationIcon(config: ExpoConfig) {\n  return config.notification?.icon || null;\n}\n\nexport function getNotificationColor(config: ExpoConfig) {\n  return config.notification?.color || null;\n}\n\n/**\n * Applies configuration for expo-notifications, including\n * the notification icon and notification color.\n */\nexport async function setNotificationIconAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getNotificationIcon(config);\n  if (icon) {\n    await writeNotificationIconImageFilesAsync(icon, projectRoot);\n  } else {\n    await removeNotificationIconImageFilesAsync(projectRoot);\n  }\n}\n\nexport async function setNotificationConfigAsync(config: ExpoConfig, manifest: AndroidManifest) {\n  const icon = getNotificationIcon(config);\n  const color = getNotificationColor(config);\n  const mainApplication = getMainApplicationOrThrow(manifest);\n  if (icon) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON,\n      NOTIFICATION_ICON_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON);\n  }\n  if (color) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON_COLOR,\n      NOTIFICATION_ICON_COLOR_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON_COLOR);\n  }\n  return manifest;\n}\n\nexport async function setNotificationIconColorAsync(config: ExpoConfig, projectRoot: string) {\n  const color = getNotificationColor(config);\n  const colorsXmlPath = await Colors.getProjectColorsXMLPathAsync(projectRoot);\n  let colorsJson = await readResourcesXMLAsync({ path: colorsXmlPath });\n  if (color) {\n    const colorItemToAdd = buildResourceItem({ name: NOTIFICATION_ICON_COLOR, value: color });\n    colorsJson = Colors.setColorItem(colorItemToAdd, colorsJson);\n  } else {\n    colorsJson = Colors.removeColorItem(NOTIFICATION_ICON_COLOR, colorsJson);\n  }\n  await writeXMLAsync({ path: colorsXmlPath, xml: colorsJson });\n}\n\nasync function writeNotificationIconImageFilesAsync(icon: string, projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.ensureDir(dpiFolderPath);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const resizedIcon = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-notification' },\n            {\n              src: icon,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'), resizedIcon);\n      } catch (e) {\n        throw new Error('Encountered an issue resizing Android notification icon: ' + e);\n      }\n    })\n  );\n}\n\nasync function removeNotificationIconImageFilesAsync(projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.remove(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'));\n    })\n  );\n}\n"]}