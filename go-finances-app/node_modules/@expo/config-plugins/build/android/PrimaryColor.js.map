{"version":3,"file":"PrimaryColor.js","sourceRoot":"","sources":["../../src/android/PrimaryColor.ts"],"names":[],"mappings":";;;AAGA,kEAA+D;AAC/D,sCAA6C;AAC7C,qCAAsE;AACtE,2CAAuE;AACvE,qCAAuE;AAEvE,MAAM,iBAAiB,GAAG,cAAc,CAAC;AACzC,MAAM,qBAAqB,GAAG,SAAS,CAAC;AAEjC,MAAM,gBAAgB,GAAiB,MAAM,CAAC,EAAE;IACrD,OAAO,mCAAgB,CAAC,MAAM,EAAE;QAC9B,SAAS;QACT,KAAK,EAAC,MAAM,EAAC,EAAE;YACb,MAAM,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAC7D,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B;AAEF,SAAgB,eAAe,CAAC,MAAwC;;IACtE,OAAO,MAAA,MAAM,CAAC,YAAY,mCAAI,qBAAqB,CAAC;AACtD,CAAC;AAFD,0CAEC;AAEM,KAAK,UAAU,eAAe,CACnC,MAAwC,EACxC,WAAmB;IAEnB,MAAM,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IAE1C,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,WAAW,CAAC,CAAC;IACnE,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,WAAW,CAAC,CAAC;IAEnE,IAAI,UAAU,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IACnE,IAAI,UAAU,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAEnE,MAAM,cAAc,GAAG,6BAAiB,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;IACxF,MAAM,cAAc,GAAG,6BAAiB,CAAC;QACvC,IAAI,EAAE,iBAAiB;QACvB,KAAK,EAAE,UAAU,iBAAiB,EAAE;KACrC,CAAC,CAAC;IAEH,UAAU,GAAG,qBAAY,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IACtD,UAAU,GAAG,sBAAa,CAAC;QACzB,IAAI,EAAE,cAAc;QACpB,GAAG,EAAE,UAAU;QACf,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,mCAAmC,EAAE;KAC1E,CAAC,CAAC;IAEH,IAAI;QACF,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,mBAAa,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;YACpD,mBAAa,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;SACrD,CAAC,CAAC;KACJ;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CACb,uEAAuE,UAAU,GAAG,CACrF,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AApCD,0CAoCC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { writeXMLAsync } from '../utils/XML';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\n\nconst COLOR_PRIMARY_KEY = 'colorPrimary';\nconst DEFAULT_PRIMARY_COLOR = '#023c69';\n\nexport const withPrimaryColor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setPrimaryColor(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getPrimaryColor(config: Pick<ExpoConfig, 'primaryColor'>) {\n  return config.primaryColor ?? DEFAULT_PRIMARY_COLOR;\n}\n\nexport async function setPrimaryColor(\n  config: Pick<ExpoConfig, 'primaryColor'>,\n  projectRoot: string\n) {\n  const hexString = getPrimaryColor(config);\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectRoot);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectRoot);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  const colorItemToAdd = buildResourceItem({ name: COLOR_PRIMARY_KEY, value: hexString });\n  const styleItemToAdd = buildResourceItem({\n    name: COLOR_PRIMARY_KEY,\n    value: `@color/${COLOR_PRIMARY_KEY}`,\n  });\n\n  colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n  stylesJSON = setStylesItem({\n    item: styleItemToAdd,\n    xml: stylesJSON,\n    parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n  });\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android primary color. Cannot write new styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"]}