{"version":3,"file":"EasBuild.js","sourceRoot":"","sources":["../../src/android/EasBuild.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wDAA0B;AAC1B,gDAAwB;AAExB,kFAAkD;AAClD,+CAAiC;AAEjC,MAAM,gBAAgB,GAAG,kCAAkC,CAAC;AAE5D,SAAS,YAAY,CAAC,OAAe,EAAE,SAAiB;IACtD,OAAO,CACL,OAAO;SACJ,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;SACtB,KAAK,CAAC,IAAI,CAAC;QACZ,0CAA0C;SACzC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAC7E,CAAC;AACJ,CAAC;AAED,SAAgB,qBAAqB,CAAC,WAAmB;IACvD,OAAO,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC;AACtE,CAAC;AAFD,sDAEC;AAEM,KAAK,UAAU,sBAAsB,CAAC,WAAmB;IAC9D,MAAM,eAAe,GAAG,KAAK,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;IACrE,MAAM,aAAa,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;IAEzD,MAAM,kBAAE,CAAC,SAAS,CAAC,aAAa,EAAE,8BAAY,CAAC,CAAC;IAEhD,MAAM,kBAAkB,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,MAAM,CAAC,CAAC;IAEjF,MAAM,iBAAiB,GAAG,YAAY,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IAE7E,IAAI,CAAC,iBAAiB,EAAE;QACtB,MAAM,kBAAE,CAAC,SAAS,CAAC,eAAe,EAAE,GAAG,kBAAkB,CAAC,IAAI,EAAE,KAAK,gBAAgB,IAAI,CAAC,CAAC;KAC5F;AACH,CAAC;AAbD,wDAaC;AAEM,KAAK,UAAU,+BAA+B,CAAC,WAAmB;IACvE,MAAM,eAAe,GAAG,KAAK,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;IACrE,MAAM,aAAa,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;IAEzD,MAAM,gBAAgB,GAAG,MAAM,kBAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAE5D,MAAM,kBAAkB,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,MAAM,CAAC,CAAC;IACjF,MAAM,iBAAiB,GAAG,YAAY,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IAE7E,OAAO,iBAAiB,IAAI,gBAAgB,CAAC;AAC/C,CAAC;AAVD,0EAUC","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport gradleScript from './EasBuildGradleScript';\nimport * as Paths from './Paths';\n\nconst APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content: string, applyLine: string): boolean {\n  return (\n    content\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === applyLine || line === applyLine.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function getEasBuildGradlePath(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nexport async function configureEasBuildAsync(projectRoot: string): Promise<void> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  await fs.writeFile(easGradlePath, gradleScript);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  if (!hasEasGradleApply) {\n    await fs.writeFile(buildGradlePath, `${buildGradleContent.trim()}\\n${APPLY_EAS_GRADLE}\\n`);\n  }\n}\n\nexport async function isEasBuildGradleConfiguredAsync(projectRoot: string): Promise<boolean> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  const hasEasGradleFile = await fs.pathExists(easGradlePath);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  return hasEasGradleApply && hasEasGradleFile;\n}\n"]}