{"version":3,"file":"Name.js","sourceRoot":"","sources":["../../src/android/Name.ts"],"names":[],"mappings":";;;;;;AACA,oDAA4B;AAG5B,gEAAwF;AACxF,sCAA6C;AAC7C,gDAAsD;AACtD,2CAAoF;AACpF,uCAA2F;AAE3F;;;;;GAKG;AACH,SAAgB,qBAAqB,CAAC,IAAY;IAChD,0BAA0B;IAC1B,oWAAoW;IACpW,OAAO,IAAI,CAAC,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;AACvD,CAAC;AAJD,sDAIC;AAEY,QAAA,QAAQ,GAAG,wCAAsB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;AAEzE,MAAM,sBAAsB,GAAiB,MAAM,CAAC,EAAE;IAC3D,OAAO,oCAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACzC,IAAI,MAAM,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAC3C,MAAM,CAAC,UAAU,CAAC,QAAQ,GAAG,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SAC1F;aAAM;YACL,4BAAiB,CACf,8BAA8B,EAC9B,mEAAmE,CACpE,CAAC;SACH;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAZW,QAAA,sBAAsB,0BAYjC;AAEF,SAAgB,OAAO,CAAC,MAAgC;IACtD,OAAO,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AAC9D,CAAC;AAFD,0BAEC;AAED;;;GAGG;AACI,KAAK,UAAU,OAAO,CAC3B,MAAgC,EAChC,WAAmB;IAEnB,MAAM,WAAW,GAAG,MAAM,uCAA6B,CAAC,WAAW,CAAC,CAAC;IACrE,gBAAM,CAAC,WAAW,CAAC,CAAC;IAEpB,IAAI,WAAW,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;IACrE,WAAW,GAAG,mBAAmB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAEvD,IAAI;QACF,MAAM,mBAAa,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;KAC9D;IAAC,MAAM;QACN,MAAM,IAAI,KAAK,CAAC,mDAAmD,WAAW,GAAG,CAAC,CAAC;KACpF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAhBD,0BAgBC;AAED,SAAS,mBAAmB,CAC1B,MAAgC,EAChC,WAAwB;IAExB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7B,IAAI,IAAI,EAAE;QACR,OAAO,uBAAa,CAAC,CAAC,6BAAiB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;KAC3F;IACD,OAAO,0BAAgB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;AACnD,CAAC;AAED;;;;;GAKG;AACH,SAAgB,uBAAuB,CAAC,MAAgC,EAAE,cAAsB;;IAC9F,MAAM,IAAI,GAAG,qBAAqB,CAAC,MAAA,OAAO,CAAC,MAAM,CAAC,mCAAI,EAAE,CAAC,CAAC;IAE1D,+EAA+E;IAC/E,OAAO,cAAc,CAAC,OAAO,CAC3B,oDAAoD,EACpD,uBAAuB,IAAI,GAAG,CAC/B,CAAC;AACJ,CAAC;AARD,0DAQC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createStringsXmlPlugin, withSettingsGradle } from '../plugins/android-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceXML } from './Resources';\nimport { getProjectStringsXMLPathAsync, removeStringItem, setStringItem } from './Strings';\n\n/**\n * Sanitize a name, this should be used for files and gradle names.\n * - `[/, \\, :, <, >, \", ?, *, |]` are not allowed https://bit.ly/3l6xqKL\n *\n * @param name\n */\nexport function sanitizeNameForGradle(name: string): string {\n  // Gradle disallows these:\n  // The project name 'My-Special ðŸ˜ƒ Co/ol_Project' must not contain any of the following characters: [/, \\, :, <, >, \", ?, *, |]. Set the 'rootProject.name' or adjust the 'include' statement (see https://docs.gradle.org/6.2/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]) for more details).\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nexport const withName = createStringsXmlPlugin(applyNameFromConfig, 'withName');\n\nexport const withNameSettingsGradle: ConfigPlugin = config => {\n  return withSettingsGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android-name-settings-gradle',\n        `Cannot automatically configure settings.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * Changes the display name on the home screen,\n * notifications, and others.\n */\nexport async function setName(\n  config: Pick<ExpoConfig, 'name'>,\n  projectRoot: string\n): Promise<boolean> {\n  const stringsPath = await getProjectStringsXMLPathAsync(projectRoot);\n  assert(stringsPath);\n\n  let stringsJSON = await readResourcesXMLAsync({ path: stringsPath });\n  stringsJSON = applyNameFromConfig(config, stringsJSON);\n\n  try {\n    await writeXMLAsync({ path: stringsPath, xml: stringsJSON });\n  } catch {\n    throw new Error(`Error setting name. Cannot write strings.xml to ${stringsPath}.`);\n  }\n  return true;\n}\n\nfunction applyNameFromConfig(\n  config: Pick<ExpoConfig, 'name'>,\n  stringsJSON: ResourceXML\n): ResourceXML {\n  const name = getName(config);\n  if (name) {\n    return setStringItem([buildResourceItem({ name: 'app_name', value: name })], stringsJSON);\n  }\n  return removeStringItem('app_name', stringsJSON);\n}\n\n/**\n * Regex a name change -- fragile.\n *\n * @param config\n * @param settingsGradle\n */\nexport function applyNameSettingsGradle(config: Pick<ExpoConfig, 'name'>, settingsGradle: string) {\n  const name = sanitizeNameForGradle(getName(config) ?? '');\n\n  // Select rootProject.name = '***' and replace the contents between the quotes.\n  return settingsGradle.replace(\n    /rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n    `rootProject.name = '${name}'`\n  );\n}\n"]}