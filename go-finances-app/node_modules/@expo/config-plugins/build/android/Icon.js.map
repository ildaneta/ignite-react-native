{"version":3,"file":"Icon.js","sourceRoot":"","sources":["../../src/android/Icon.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { compositeImagesAsync, generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { writeXMLAsync } from '../utils/XML';\nimport * as Colors from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\n\ntype DPIString = 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype dpiMap = Record<DPIString, { folderName: string; scale: number }>;\n\nexport const dpiValues: dpiMap = {\n  mdpi: { folderName: 'mipmap-mdpi', scale: 1 },\n  hdpi: { folderName: 'mipmap-hdpi', scale: 1.5 },\n  xhdpi: { folderName: 'mipmap-xhdpi', scale: 2 },\n  xxhdpi: { folderName: 'mipmap-xxhdpi', scale: 3 },\n  xxxhdpi: { folderName: 'mipmap-xxxhdpi', scale: 4 },\n};\nconst BASELINE_PIXEL_SIZE = 48;\nexport const ANDROID_RES_PATH = 'android/app/src/main/res/';\nconst MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nconst ICON_BACKGROUND = 'iconBackground';\nconst IC_LAUNCHER_PNG = 'ic_launcher.png';\nconst IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nconst IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nconst IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nconst IC_LAUNCHER_XML = 'ic_launcher.xml';\nconst IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\n\nexport const withIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getIcon(config: ExpoConfig) {\n  return config.icon || config.android?.icon || null;\n}\n\nexport function getAdaptiveIcon(config: ExpoConfig) {\n  return {\n    foregroundImage: config.android?.adaptiveIcon?.foregroundImage ?? null,\n    backgroundColor: config.android?.adaptiveIcon?.backgroundColor ?? null,\n    backgroundImage: config.android?.adaptiveIcon?.backgroundImage ?? null,\n  };\n}\n\n/**\n * Resizes the user-provided icon to create a set of legacy icon files in\n * their respective \"mipmap\" directories for <= Android 7, and creates a set of adaptive\n * icon files for > Android 7 from the adaptive icon files (if provided).\n */\nexport async function setIconAsync(config: ExpoConfig, projectRoot: string) {\n  const { foregroundImage, backgroundColor, backgroundImage } = getAdaptiveIcon(config);\n  const icon = foregroundImage ?? getIcon(config);\n\n  if (!icon) {\n    return null;\n  }\n\n  await configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n\n  await configureAdaptiveIconAsync(\n    projectRoot,\n    icon,\n    backgroundImage,\n    backgroundColor ?? '#FFFFFF'\n  );\n\n  return true;\n}\n\n/**\n * Configures legacy icon files to be used on Android 7 and earlier. If adaptive icon configuration\n * was provided, we create a pseudo-adaptive icon by layering the provided files (or background\n * color if no backgroundImage is provided. If no backgroundImage and no backgroundColor are provided,\n * the background is set to transparent.)\n */\nasync function configureLegacyIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      // backgroundImage overrides backgroundColor\n      backgroundColor = backgroundImage ? 'transparent' : backgroundColor ?? 'transparent';\n\n      let squareIconImage: Buffer = (\n        await generateImageAsync(\n          { projectRoot, cacheType: 'android-standard-square' },\n          {\n            src: icon,\n            width: iconSizePx,\n            height: iconSizePx,\n            resizeMode: 'cover',\n            backgroundColor,\n          }\n        )\n      ).source;\n      let roundIconImage: Buffer = (\n        await generateImageAsync(\n          { projectRoot, cacheType: 'android-standard-circle' },\n          {\n            src: icon,\n            width: iconSizePx,\n            height: iconSizePx,\n            resizeMode: 'cover',\n            backgroundColor,\n            borderRadius: iconSizePx / 2,\n          }\n        )\n      ).source;\n\n      if (backgroundImage) {\n        // Layer the buffers we just created on top of the background image that's provided\n        const squareBackgroundLayer = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-standard-square-background' },\n            {\n              src: backgroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        const roundBackgroundLayer = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-standard-round-background' },\n            {\n              src: backgroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n              borderRadius: iconSizePx / 2,\n            }\n          )\n        ).source;\n        squareIconImage = await compositeImagesAsync({\n          foreground: squareIconImage,\n          background: squareBackgroundLayer,\n        });\n        roundIconImage = await compositeImagesAsync({\n          foreground: roundIconImage,\n          background: roundBackgroundLayer,\n        });\n      }\n\n      await fs.ensureDir(dpiFolderPath);\n      await fs.writeFile(path.resolve(dpiFolderPath, IC_LAUNCHER_PNG), squareIconImage);\n      await fs.writeFile(path.resolve(dpiFolderPath, IC_LAUNCHER_ROUND_PNG), roundIconImage);\n    })\n  );\n}\n\n/**\n * Configures adaptive icon files to be used on Android 8 and up. A foreground image must be provided,\n * and will have a transparent background unless:\n * - A backgroundImage is provided, or\n * - A backgroundColor was specified\n */\nexport async function configureAdaptiveIconAsync(\n  projectRoot: string,\n  foregroundImage: string,\n  backgroundImage: string | null,\n  backgroundColor: string\n) {\n  await setBackgroundColorAsync(projectRoot, backgroundColor);\n\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const adpativeIconForeground = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-adaptive-foreground' },\n            {\n              src: foregroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(\n          path.resolve(dpiFolderPath, IC_LAUNCHER_FOREGROUND_PNG),\n          adpativeIconForeground\n        );\n\n        if (backgroundImage) {\n          const adpativeIconBackground = (\n            await generateImageAsync(\n              { projectRoot, cacheType: 'android-adaptive-background' },\n              {\n                src: backgroundImage,\n                width: iconSizePx,\n                height: iconSizePx,\n                resizeMode: 'cover',\n                backgroundColor: 'transparent',\n              }\n            )\n          ).source;\n          await fs.writeFile(\n            path.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG),\n            adpativeIconBackground\n          );\n        } else {\n          // Remove any instances of ic_launcher_background.png that are there from previous icons\n          await removeBackgroundImageFilesAsync(projectRoot);\n        }\n      } catch (e) {\n        throw new Error('Encountered an issue resizing adaptive app icon: ' + e);\n      }\n    })\n  );\n\n  // create ic_launcher.xml and ic_launcher_round.xml\n  const icLauncherXmlString = createAdaptiveIconXmlString(backgroundImage);\n  await createAdaptiveIconXmlFiles(projectRoot, icLauncherXmlString);\n}\n\nasync function setBackgroundColorAsync(projectRoot: string, backgroundColor: string | null) {\n  const colorsXmlPath = await Colors.getProjectColorsXMLPathAsync(projectRoot);\n  let colorsJson = await readResourcesXMLAsync({ path: colorsXmlPath });\n  if (backgroundColor) {\n    const colorItemToAdd = buildResourceItem({ name: ICON_BACKGROUND, value: backgroundColor });\n    colorsJson = Colors.setColorItem(colorItemToAdd, colorsJson);\n  } else {\n    colorsJson = Colors.removeColorItem(ICON_BACKGROUND, colorsJson);\n  }\n\n  await writeXMLAsync({ path: colorsXmlPath, xml: colorsJson });\n}\n\nexport const createAdaptiveIconXmlString = (backgroundImage: string | null) => {\n  let background = `<background android:drawable=\"@color/iconBackground\"/>`;\n  if (backgroundImage) {\n    background = `<background android:drawable=\"@mipmap/ic_launcher_background\"/>`;\n  }\n\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ${background}\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>\n</adaptive-icon>`;\n};\n\nasync function createAdaptiveIconXmlFiles(projectRoot: string, icLauncherXmlString: string) {\n  const anyDpiV26Directory = path.resolve(projectRoot, ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n  await fs.ensureDir(anyDpiV26Directory);\n  await fs.writeFile(path.resolve(anyDpiV26Directory, IC_LAUNCHER_XML), icLauncherXmlString);\n  await fs.writeFile(path.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML), icLauncherXmlString);\n}\n\nasync function removeBackgroundImageFilesAsync(projectRoot: string) {\n  return await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      await fs.remove(path.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG));\n    })\n  );\n}\n"]}