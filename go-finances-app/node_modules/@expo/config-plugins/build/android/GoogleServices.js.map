{"version":3,"file":"GoogleServices.js","sourceRoot":"","sources":["../../src/android/GoogleServices.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport { resolve } from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport * as WarningAggregator from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = config => {\n  return withProjectBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-google-services',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-google-services',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = resolve(projectRoot, partialSourcePath);\n  const destinationPath = resolve(projectRoot, targetPath);\n\n  try {\n    await fs.copy(completeSourcePath, destinationPath);\n  } catch (e) {\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"]}