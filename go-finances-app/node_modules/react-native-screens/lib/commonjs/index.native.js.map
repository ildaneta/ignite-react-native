{"version":3,"sources":["index.native.tsx"],"names":["isPlatformSupported","Platform","OS","ENABLE_SCREENS","enableScreens","shouldEnableScreens","UIManager","getViewManagerConfig","console","error","shouldUseActivityState","screensEnabled","NativeScreenValue","NativeScreenContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","NativeSearchBar","ScreensNativeModules","NativeScreen","NativeScreenContainer","Screen","React","Component","ref","props","onComponentRef","setNativeProps","render","enabled","Animated","createAnimatedComponent","active","activityState","statusBarColor","rest","undefined","warn","processedColor","setRef","style","display","ScreenContainer","styles","StyleSheet","create","headerSubview","position","top","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","module","exports","ScreenStack","ScreenStackHeaderConfig","ScreenStackHeaderSubview","SearchBar","View"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\n// @ts-ignore Getting private component\n// eslint-disable-next-line import/default\nimport processColor from 'react-native/Libraries/StyleSheet/processColor';\n\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n};\n\nclass Screen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const { enabled = ENABLE_SCREENS } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        // same for enabled prop\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        enabled,\n        active,\n        activityState,\n        statusBarColor,\n        ...rest\n      } = this.props;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const processedColor = processColor(statusBarColor);\n\n      return (\n        <AnimatedNativeScreen\n          {...rest}\n          statusBarColor={processedColor}\n          activityState={activityState}\n          ref={this.setRef}\n        />\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        enabled,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...rest\n      } = this.props;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...rest}\n        />\n      );\n    }\n  }\n}\n\nclass ScreenContainer extends React.Component<ScreenContainerProps> {\n  render() {\n    const { enabled = ENABLE_SCREENS, ...rest } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get ScreenStack() {\n    return ScreensNativeModules.NativeScreenStack;\n  },\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing SearchBar is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  screensEnabled,\n  shouldUseActivityState,\n};\n"]}