{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["REMOVE_ACTION","renderComponentOrThunk","componentOrThunk","props","StackView","React","Component","route","navigation","dispatch","type","immediate","key","descriptor","options","onAppear","StackActions","completeTransition","toChildKey","state","routes","lastRoute","length","index","navigationConfig","headerMode","backButtonInCustomView","direction","headerBackTitle","headerBackTitleStyle","headerBackTitleVisible","headerHideBackButton","headerHideShadow","headerLargeStyle","headerLargeTitle","headerLargeTitleHideShadow","headerLargeTitleStyle","headerShown","headerStyle","headerTintColor","headerTitleStyle","headerTopInsetEnabled","headerTranslucent","hideShadow","largeTitle","largeTitleHideShadow","screenOrientation","statusBarAnimation","statusBarHidden","statusBarStyle","title","translucent","scene","headerOptions","backTitle","backTitleFontFamily","fontFamily","backTitleFontSize","fontSize","color","topInsetEnabled","hideBackButton","largeTitleBackgroundColor","backgroundColor","largeTitleColor","largeTitleFontFamily","largeTitleFontSize","largeTitleFontWeight","fontWeight","titleColor","titleFontFamily","titleFontSize","titleFontWeight","hasHeader","header","undefined","blurEffect","children","backButtonImage","push","headerLeft","headerBackImage","goBack","requestAnimationFrame","headerPressColorAndroid","backButtonTitle","truncatedBackButtonTitle","backTitleVisible","layoutPreset","headerTitle","headerRight","getComponent","mode","transparentCard","SceneComponent","stackPresentation","cardTransparent","stackAnimation","animationEnabled","screenProps","StyleSheet","absoluteFill","cardStyle","replaceAnimation","Platform","OS","gestureEnabled","onWillAppear","onWillDisappear","onDisappear","removeScene","renderHeaderConfig","render","descriptors","styles","scenes","onFinishTransitioning","map","i","renderScene","create","flex","createStackNavigator","routeConfigMap","stackConfig","router","superGetStateForAction","getStateForAction","action","backRouteIndex","backRoute","find","indexOf","newRoutes","splice","isTransitioning"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  NativeSyntheticEvent,\n  NativeTouchEvent,\n  Platform,\n  StyleSheet,\n  Animated,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport {\n  Screen,\n  ScreenStack,\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderConfigProps,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  createNavigator,\n  SceneView,\n  StackActions,\n  StackRouter,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationStackRouterConfig,\n  NavigationParams,\n  NavigationRoute,\n  NavigationDescriptor,\n  NavigationState,\n  NavigationNavigator,\n  NavigationAction,\n  NavigationProp,\n} from 'react-navigation';\nimport { NativeStackNavigationOptions as NativeStackNavigationOptionsV5 } from './native-stack/types';\nimport { HeaderBackButton } from 'react-navigation-stack';\nimport {\n  StackNavigationHelpers,\n  StackNavigationProp,\n  Layout,\n} from 'react-navigation-stack/src/vendor/types';\n\nconst REMOVE_ACTION = 'NativeStackNavigator/REMOVE';\n\nfunction renderComponentOrThunk(componentOrThunk: unknown, props: unknown) {\n  if (typeof componentOrThunk === 'function') {\n    return componentOrThunk(props);\n  }\n  return componentOrThunk;\n}\n\ntype NativeStackRemoveNavigationAction = {\n  type: typeof REMOVE_ACTION;\n  immediate: boolean;\n  key?: string;\n};\n\nexport type NativeStackNavigationProp = StackNavigationProp;\n\nexport type NativeStackNavigationOptions = StackNavigatorOptions &\n  NativeStackNavigationOptionsV5 &\n  BackButtonProps & {\n    onWillAppear?: () => void;\n    onAppear?: () => void;\n    onWillDisappear?: () => void;\n    onDisappear?: () => void;\n    // these props differ from the ones used in v5 `native-stack`, and we would like to keep the API consistent between versions\n    /** Use `headerHideShadow` to be consistent with v5 `native-stack` */\n    hideShadow?: boolean;\n    /** Use `headerLargeTitle` to be consistent with v5 `native-stack` */\n    largeTitle?: boolean;\n    /** Use `headerLargeTitleHideShadow` to be consistent with v5 `native-stack` */\n    largeTitleHideShadow?: boolean;\n    /** Use `headerTranslucent` to be consistent with v5 `native-stack` */\n    translucent?: boolean;\n  };\n\n// these are adopted from `stack` navigator\ntype StackNavigatorOptions = {\n  /** This is an option from `stackNavigator` and it hides the header when set to `null`. Use `headerShown` instead to be consistent with v5 `native-stack`. */\n  header?: React.ComponentType<Record<string, unknown>> | null;\n  /** This is an option from `stackNavigator` and it controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  cardTransparent?: boolean;\n  /** This is an option from `stackNavigator` and it sets stack animation to none when `false` passed. Use `stackAnimation: 'none'` instead to be consistent with v5 `native-stack` */\n  animationEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype BackButtonProps = {\n  headerBackImage?: (props: { tintColor: string }) => React.ReactNode;\n  headerPressColorAndroid?: string;\n  headerTintColor?: string;\n  backButtonTitle?: string;\n  truncatedBackButtonTitle?: string;\n  backTitleVisible?: boolean;\n  headerBackTitleStyle?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n  layoutPreset?: Layout;\n};\n\ntype NativeStackDescriptor = NavigationDescriptor<\n  NavigationParams,\n  NativeStackNavigationOptions\n>;\n\ntype NativeStackDescriptorMap = {\n  [key: string]: NativeStackDescriptor;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype NativeStackNavigationConfig = {\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `cardTransparent` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  mode?: 'modal' | 'containedModal';\n  /** This is an option from `stackNavigator` and makes the header hide when set to `none`. Use `headerShown` instead to be consistent with v5 `native-stack` */\n  headerMode?: 'none';\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  transparentCard?: boolean;\n};\n\ntype Props = {\n  navigation: StackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n  navigationConfig: NativeStackNavigationConfig;\n  screenProps: unknown;\n};\nclass StackView extends React.Component<Props> {\n  private removeScene = (route: NavigationRoute<NavigationParams>) => {\n    this.props.navigation.dispatch({\n      // @ts-ignore special navigation action for native stack\n      type: REMOVE_ACTION,\n      immediate: true,\n      key: route.key,\n    });\n  };\n\n  private onAppear = (\n    route: NavigationRoute<NavigationParams>,\n    descriptor: NativeStackDescriptor\n  ) => {\n    descriptor.options?.onAppear?.();\n    this.props.navigation.dispatch(\n      StackActions.completeTransition({\n        toChildKey: route.key,\n        key: this.props.navigation.state.key,\n      })\n    );\n  };\n\n  private onFinishTransitioning:\n    | ((e: NativeSyntheticEvent<NativeTouchEvent>) => void)\n    | undefined = () => {\n    const { routes } = this.props.navigation.state;\n    const lastRoute = routes?.length && routes[routes.length - 1];\n\n    if (lastRoute) {\n      this.props.navigation.dispatch(\n        StackActions.completeTransition({\n          toChildKey: lastRoute.key,\n          key: this.props.navigation.state.key,\n        })\n      );\n    }\n  };\n\n  private renderHeaderConfig = (\n    index: number,\n    route: NavigationRoute<NavigationParams>,\n    descriptor: NativeStackDescriptor\n  ) => {\n    const { navigationConfig } = this.props;\n    const { options } = descriptor;\n    const { headerMode } = navigationConfig;\n\n    const {\n      backButtonInCustomView,\n      direction,\n      headerBackTitle,\n      headerBackTitleStyle,\n      headerBackTitleVisible,\n      headerHideBackButton,\n      headerHideShadow,\n      headerLargeStyle,\n      headerLargeTitle,\n      headerLargeTitleHideShadow,\n      headerLargeTitleStyle,\n      headerShown,\n      headerStyle,\n      headerTintColor,\n      headerTitleStyle,\n      headerTopInsetEnabled = true,\n      headerTranslucent,\n      hideShadow,\n      largeTitle,\n      largeTitleHideShadow,\n      screenOrientation,\n      statusBarAnimation,\n      statusBarHidden,\n      statusBarStyle,\n      title,\n      translucent,\n    } = options;\n\n    const scene = {\n      index,\n      key: route.key,\n      route,\n      descriptor,\n    };\n\n    const headerOptions: ScreenStackHeaderConfigProps = {\n      backButtonInCustomView,\n      backTitle: headerBackTitleVisible === false ? '' : headerBackTitle,\n      backTitleFontFamily: headerBackTitleStyle?.fontFamily,\n      backTitleFontSize: headerBackTitleStyle?.fontSize,\n      color: headerTintColor,\n      direction,\n      topInsetEnabled: headerTopInsetEnabled,\n      hideBackButton: headerHideBackButton,\n      hideShadow: headerHideShadow || hideShadow,\n      largeTitle: headerLargeTitle || largeTitle,\n      largeTitleBackgroundColor:\n        headerLargeStyle?.backgroundColor ||\n        // @ts-ignore old implementation, will not be present in TS API, but can be used here\n        headerLargeTitleStyle?.backgroundColor,\n      largeTitleColor: headerLargeTitleStyle?.color,\n      largeTitleFontFamily: headerLargeTitleStyle?.fontFamily,\n      largeTitleFontSize: headerLargeTitleStyle?.fontSize,\n      largeTitleFontWeight: headerLargeTitleStyle?.fontWeight,\n      largeTitleHideShadow: largeTitleHideShadow || headerLargeTitleHideShadow,\n      screenOrientation,\n      statusBarAnimation,\n      statusBarHidden,\n      statusBarStyle,\n      title,\n      titleColor: headerTitleStyle?.color || headerTintColor,\n      titleFontFamily: headerTitleStyle?.fontFamily,\n      titleFontSize: headerTitleStyle?.fontSize,\n      titleFontWeight: headerTitleStyle?.fontWeight,\n      translucent: headerTranslucent || translucent || false,\n    };\n\n    const hasHeader =\n      headerShown !== false && headerMode !== 'none' && options.header !== null;\n    if (!hasHeader) {\n      return <ScreenStackHeaderConfig {...headerOptions} hidden />;\n    }\n\n    if (headerStyle !== undefined) {\n      headerOptions.backgroundColor = headerStyle.backgroundColor;\n      headerOptions.blurEffect = headerStyle.blurEffect;\n    }\n\n    const children = [];\n\n    if (options.backButtonImage) {\n      children.push(\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={options.backButtonImage}\n        />\n      );\n    }\n\n    if (options.headerLeft !== undefined) {\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          {renderComponentOrThunk(options.headerLeft, { scene })}\n        </ScreenStackHeaderLeftView>\n      );\n    } else if (options.headerBackImage !== undefined) {\n      const goBack = () => {\n        // Go back on next tick because button ripple effect needs to happen on Android\n        requestAnimationFrame(() => {\n          descriptor.navigation.goBack(descriptor.key);\n        });\n      };\n\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          <HeaderBackButton\n            onPress={goBack}\n            pressColorAndroid={options.headerPressColorAndroid}\n            tintColor={options.headerTintColor}\n            backImage={options.headerBackImage}\n            label={options.backButtonTitle}\n            truncatedLabel={options.truncatedBackButtonTitle}\n            labelVisible={options.backTitleVisible}\n            labelStyle={options.headerBackTitleStyle}\n            titleLayout={options.layoutPreset}\n            // @ts-ignore old props kept for very old version of `react-navigation-stack`\n            title={options.backButtonTitle}\n            truncatedTitle={options.truncatedBackButtonTitle}\n            backTitleVisible={options.backTitleVisible}\n            titleStyle={options.headerBackTitleStyle}\n            layoutPreset={options.layoutPreset}\n            scene={scene}\n          />\n        </ScreenStackHeaderLeftView>\n      );\n    }\n\n    if (options.headerTitle) {\n      if (title === undefined && typeof options.headerTitle === 'string') {\n        headerOptions.title = options.headerTitle;\n      } else {\n        children.push(\n          <ScreenStackHeaderCenterView key=\"center\">\n            {renderComponentOrThunk(options.headerTitle, { scene })}\n          </ScreenStackHeaderCenterView>\n        );\n      }\n    }\n\n    if (options.headerRight) {\n      children.push(\n        <ScreenStackHeaderRightView key=\"right\">\n          {renderComponentOrThunk(options.headerRight, { scene })}\n        </ScreenStackHeaderRightView>\n      );\n    }\n\n    if (children.length > 0) {\n      headerOptions.children = children;\n    }\n\n    return <ScreenStackHeaderConfig {...headerOptions} />;\n  };\n\n  private renderScene = (\n    index: number,\n    route: NavigationRoute<NavigationParams>,\n    descriptor: NativeStackDescriptor\n  ) => {\n    const { navigation, getComponent, options } = descriptor;\n    const { mode, transparentCard } = this.props.navigationConfig;\n    const SceneComponent = getComponent();\n\n    let stackPresentation: StackPresentationTypes = 'push';\n\n    if (options.stackPresentation) {\n      stackPresentation = options.stackPresentation;\n    } else {\n      // this shouldn't be used because we have a prop for that\n      if (mode === 'modal' || mode === 'containedModal') {\n        stackPresentation = mode;\n        if (transparentCard || options.cardTransparent) {\n          stackPresentation =\n            mode === 'containedModal'\n              ? 'containedTransparentModal'\n              : 'transparentModal';\n        }\n      }\n    }\n    let stackAnimation = options.stackAnimation;\n    if (options.animationEnabled === false) {\n      stackAnimation = 'none';\n    }\n\n    const { screenProps } = this.props;\n    return (\n      <Screen\n        key={`screen_${route.key}`}\n        style={[StyleSheet.absoluteFill, options.cardStyle]}\n        stackAnimation={stackAnimation}\n        stackPresentation={stackPresentation}\n        replaceAnimation={\n          options.replaceAnimation === undefined\n            ? 'pop'\n            : options.replaceAnimation\n        }\n        pointerEvents={\n          index === this.props.navigation.state.routes.length - 1\n            ? 'auto'\n            : 'none'\n        }\n        gestureEnabled={\n          Platform.OS === 'android'\n            ? false\n            : options.gestureEnabled === undefined\n            ? true\n            : options.gestureEnabled\n        }\n        onAppear={() => this.onAppear(route, descriptor)}\n        onWillAppear={() => options?.onWillAppear?.()}\n        onWillDisappear={() => options?.onWillDisappear?.()}\n        onDisappear={() => options?.onDisappear?.()}\n        onDismissed={() => this.removeScene(route)}>\n        {this.renderHeaderConfig(index, route, descriptor)}\n        <SceneView\n          screenProps={screenProps}\n          navigation={navigation}\n          component={SceneComponent}\n        />\n      </Screen>\n    );\n  };\n\n  render() {\n    const { navigation, descriptors } = this.props;\n\n    return (\n      <ScreenStack\n        style={styles.scenes}\n        onFinishTransitioning={this.onFinishTransitioning}>\n        {navigation.state.routes.map((route, i) =>\n          this.renderScene(i, route, descriptors[route.key])\n        )}\n      </ScreenStack>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  scenes: { flex: 1 },\n});\n\nfunction createStackNavigator(\n  routeConfigMap: NavigationRouteConfigMap<\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  >,\n  stackConfig: CreateNavigatorConfig<\n    NativeStackNavigationConfig,\n    NavigationStackRouterConfig,\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  > = {}\n): NavigationNavigator<\n  Record<string, unknown>,\n  NavigationProp<NavigationState>\n> {\n  const router = StackRouter(routeConfigMap, stackConfig);\n\n  // below we override getStateForAction method in order to add handling for\n  // a custom native stack navigation action. The action REMOVE that we want to\n  // add works in a similar way to POP, but it does not remove all the routes\n  // that sit on top of the removed route. For example if we have three routes\n  // [a,b,c] and call POP on b, then both b and c will go away. In case we\n  // call REMOVE on b, only b will be removed from the stack and the resulting\n  // state will be [a, c]\n  const superGetStateForAction = router.getStateForAction;\n  router.getStateForAction = (\n    action: NavigationAction | NativeStackRemoveNavigationAction,\n    state\n  ) => {\n    if (action.type === REMOVE_ACTION) {\n      const { key, immediate } = action;\n      let backRouteIndex = state.index;\n      if (key) {\n        const backRoute = state.routes.find(\n          (route: NavigationRoute<NavigationParams>) => route.key === key\n        );\n        backRouteIndex = state.routes.indexOf(backRoute);\n      }\n\n      if (backRouteIndex > 0) {\n        const newRoutes = [...state.routes];\n        newRoutes.splice(backRouteIndex, 1);\n        return {\n          ...state,\n          routes: newRoutes,\n          index: newRoutes.length - 1,\n          isTransitioning: immediate !== true,\n        };\n      }\n    }\n    return superGetStateForAction(action as NavigationAction, state);\n  };\n  // Create a navigator with StackView as the view\n  return createNavigator(StackView, router, stackConfig);\n}\n\nexport default createStackNavigator;\n"]}