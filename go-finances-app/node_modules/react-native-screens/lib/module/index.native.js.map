{"version":3,"sources":["index.native.tsx"],"names":["React","Animated","Image","requireNativeComponent","StyleSheet","UIManager","View","ENABLE_SCREENS","enableScreens","shouldEnableScreens","getViewManagerConfig","console","error","shouldUseActivityState","screensEnabled","NativeScreenValue","NativeScreenContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","ScreensNativeModules","NativeScreen","NativeScreenContainer","Screen","Component","ref","props","onComponentRef","setNativeProps","render","enabled","createAnimatedComponent","active","activityState","rest","undefined","warn","setRef","ScreenContainer","styles","create","headerSubview","position","top","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","module","exports","ScreenStack","ScreenStackHeaderConfig","ScreenStackHeaderSubview"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n} from './types';\n\nlet ENABLE_SCREENS = true;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n};\n\nclass Screen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const { enabled = ENABLE_SCREENS } = this.props;\n\n    if (enabled) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      // same reason as above\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      let { enabled, active, activityState, ...rest } = this.props;\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n      return (\n        <AnimatedNativeScreen\n          {...rest}\n          activityState={activityState}\n          ref={this.setRef}\n        />\n      );\n    } else {\n      // Filter out active prop in this case because it is unused and\n      // can cause problems depending on react-native version:\n      // https://github.com/react-navigation/react-navigation/issues/4886\n      // same for enabled prop\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { active, enabled, onComponentRef, ...rest } = this.props;\n\n      return <Animated.View {...rest} ref={this.setRef} />;\n    }\n  }\n}\n\nclass ScreenContainer extends React.Component<ScreenContainerProps> {\n  render() {\n    const { enabled = ENABLE_SCREENS, ...rest } = this.props;\n\n    if (enabled) {\n      return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n};\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get ScreenStack() {\n    return ScreensNativeModules.NativeScreenStack;\n  },\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n\n  enableScreens,\n  screensEnabled,\n  shouldUseActivityState,\n};\n"]}