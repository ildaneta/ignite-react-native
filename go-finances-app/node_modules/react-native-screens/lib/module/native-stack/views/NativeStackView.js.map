{"version":3,"sources":["NativeStackView.tsx"],"names":["React","Platform","StyleSheet","View","AppContainer","warnOnce","Screen","ScreenComponent","ScreenStack","StackActions","useTheme","useSafeAreaFrame","useSafeAreaInsets","HeaderConfig","SafeAreaProviderCompat","getDefaultHeaderHeight","HeaderHeightContext","isAndroid","OS","Container","__DEV__","DebugContainer","props","stackPresentation","rest","MaybeNestedStack","options","route","children","colors","headerShown","contentStyle","isHeaderInModal","headerShownPreviousRef","useRef","useEffect","current","name","content","styles","container","backgroundColor","background","topInset","top","dimensions","headerHeight","absoluteFill","RouteView","descriptors","index","navigation","stateKey","render","renderScene","key","gestureEnabled","replaceAnimation","screenOrientation","stackAnimation","statusBarAnimation","statusBarColor","statusBarHidden","statusBarStyle","statusBarTranslucent","isHeaderInPush","parentHeaderHeight","useContext","emit","type","data","closing","target","e","dismissCount","nativeEvent","dispatch","pop","source","NativeStackViewInner","state","routes","map","NativeStackView","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View, ViewProps } from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport warnOnce from 'warn-once';\nimport {\n  Screen as ScreenComponent,\n  ScreenProps,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  ParamListBase,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n  Route,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nimport {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport HeaderConfig from './HeaderConfig';\nimport SafeAreaProviderCompat from '../utils/SafeAreaProviderCompat';\nimport getDefaultHeaderHeight from '../utils/getDefaultHeaderHeight';\nimport HeaderHeightContext from '../utils/HeaderHeightContext';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\nconst isAndroid = Platform.OS === 'android';\n\nlet Container = View;\n\nif (__DEV__) {\n  const DebugContainer = (\n    props: ViewProps & { stackPresentation: StackPresentationTypes }\n  ) => {\n    const { stackPresentation, ...rest } = props;\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n    return <View {...rest} />;\n  };\n  // @ts-ignore Wrong props\n  Container = DebugContainer;\n}\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  stackPresentation,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  stackPresentation: StackPresentationTypes;\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : stackPresentation !== 'push' && headerShown === true;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        stackPresentation !== 'push' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, stackPresentation, route.name]);\n\n  const content = (\n    <Container\n      style={[\n        styles.container,\n        stackPresentation !== 'transparentModal' &&\n          stackPresentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      // @ts-ignore Wrong props passed to View\n      stackPresentation={stackPresentation}>\n      {children}\n    </Container>\n  );\n\n  const topInset = useSafeAreaInsets().top;\n  const dimensions = useSafeAreaFrame();\n  const headerHeight = getDefaultHeaderHeight(\n    dimensions,\n    topInset,\n    stackPresentation\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            <HeaderConfig {...options} route={route} />\n            {content}\n          </HeaderHeightContext.Provider>\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype NavigationRoute<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList\n> = Route<Extract<RouteName, string>, ParamList[RouteName]> & {\n  state?: NavigationState | PartialState<NavigationState>;\n};\n\nconst RouteView = ({\n  descriptors,\n  route,\n  index,\n  navigation,\n  stateKey,\n}: {\n  descriptors: NativeStackDescriptorMap;\n  route: NavigationRoute<ParamListBase, string>;\n  index: number;\n  navigation: NativeStackNavigationHelpers;\n  stateKey: string;\n}) => {\n  const { options, render: renderScene } = descriptors[route.key];\n  const {\n    gestureEnabled,\n    headerShown,\n    replaceAnimation = 'pop',\n    screenOrientation,\n    stackAnimation,\n    statusBarAnimation,\n    statusBarColor,\n    statusBarHidden,\n    statusBarStyle,\n    statusBarTranslucent,\n  } = options;\n\n  let { stackPresentation = 'push' } = options;\n\n  if (index === 0) {\n    // first screen should always be treated as `push`, it resolves problems with no header animation\n    // for navigator with first screen as `modal` and the next as `push`\n    stackPresentation = 'push';\n  }\n\n  const isHeaderInPush = isAndroid\n    ? headerShown\n    : stackPresentation === 'push' && headerShown !== false;\n\n  const dimensions = useSafeAreaFrame();\n  const topInset = useSafeAreaInsets().top;\n  const headerHeight = getDefaultHeaderHeight(\n    dimensions,\n    topInset,\n    stackPresentation\n  );\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  return (\n    <Screen\n      key={route.key}\n      enabled\n      style={StyleSheet.absoluteFill}\n      gestureEnabled={isAndroid ? false : gestureEnabled}\n      replaceAnimation={replaceAnimation}\n      screenOrientation={screenOrientation}\n      stackAnimation={stackAnimation}\n      stackPresentation={stackPresentation}\n      statusBarAnimation={statusBarAnimation}\n      statusBarColor={statusBarColor}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      statusBarTranslucent={statusBarTranslucent}\n      onWillAppear={() => {\n        navigation.emit({\n          type: 'transitionStart',\n          data: { closing: false },\n          target: route.key,\n        });\n      }}\n      onWillDisappear={() => {\n        navigation.emit({\n          type: 'transitionStart',\n          data: { closing: true },\n          target: route.key,\n        });\n      }}\n      onAppear={() => {\n        navigation.emit({\n          type: 'appear',\n          target: route.key,\n        });\n        navigation.emit({\n          type: 'transitionEnd',\n          data: { closing: false },\n          target: route.key,\n        });\n      }}\n      onDisappear={() => {\n        navigation.emit({\n          type: 'transitionEnd',\n          data: { closing: true },\n          target: route.key,\n        });\n      }}\n      onDismissed={(e) => {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key,\n        });\n\n        const dismissCount =\n          e.nativeEvent.dismissCount > 0 ? e.nativeEvent.dismissCount : 1;\n\n        navigation.dispatch({\n          ...StackActions.pop(dismissCount),\n          source: route.key,\n          target: stateKey,\n        });\n      }}>\n      <HeaderHeightContext.Provider\n        value={\n          isHeaderInPush !== false ? headerHeight : parentHeaderHeight ?? 0\n        }>\n        <HeaderConfig {...options} route={route} headerShown={isHeaderInPush} />\n        <MaybeNestedStack\n          options={options}\n          route={route}\n          stackPresentation={stackPresentation}>\n          {renderScene()}\n        </MaybeNestedStack>\n      </HeaderHeightContext.Provider>\n    </Screen>\n  );\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({\n  state,\n  navigation,\n  descriptors,\n}: Props): JSX.Element {\n  const { key, routes } = state;\n\n  return (\n    <ScreenStack style={styles.container}>\n      {routes.map((route, index) => (\n        <RouteView\n          key={route.key}\n          descriptors={descriptors}\n          route={route}\n          index={index}\n          navigation={navigation}\n          stateKey={key}\n        />\n      ))}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}