{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["React","Platform","StyleSheet","Screen","ScreenStack","ScreenStackHeaderBackButtonImage","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderLeftView","ScreenStackHeaderRightView","ScreenStackHeaderSearchBarView","SearchBar","createNavigator","SceneView","StackActions","StackRouter","HeaderBackButton","REMOVE_ACTION","isAndroid","OS","didWarn","renderComponentOrThunk","componentOrThunk","props","StackView","Component","route","dismissCount","navigation","dispatch","type","immediate","key","descriptor","options","onAppear","completeTransition","toChildKey","state","routes","lastRoute","length","index","navigationConfig","headerMode","backButtonInCustomView","direction","disableBackButtonMenu","headerBackTitle","headerBackTitleStyle","headerBackTitleVisible","headerHideBackButton","headerHideShadow","headerLargeStyle","headerLargeTitle","headerLargeTitleHideShadow","headerLargeTitleStyle","headerShown","headerStyle","headerTintColor","headerTitleStyle","headerTopInsetEnabled","headerTranslucent","hideShadow","largeTitle","largeTitleHideShadow","title","translucent","scene","headerOptions","backTitle","backTitleFontFamily","fontFamily","backTitleFontSize","fontSize","color","topInsetEnabled","hideBackButton","largeTitleBackgroundColor","backgroundColor","largeTitleColor","largeTitleFontFamily","largeTitleFontSize","largeTitleFontWeight","fontWeight","titleColor","titleFontFamily","titleFontSize","titleFontWeight","hasHeader","header","undefined","blurEffect","children","backButtonImage","push","searchBar","headerLeft","headerBackImage","goBack","requestAnimationFrame","headerPressColorAndroid","backButtonTitle","truncatedBackButtonTitle","backTitleVisible","layoutPreset","headerTitle","headerRight","isHeaderInModal","screenProps","SceneComponent","styles","scenes","absoluteFill","renderHeaderConfig","getComponent","mode","transparentCard","stackPresentation","cardTransparent","stackAnimation","animationEnabled","console","warn","isHeaderInPush","cardStyle","replaceAnimation","gestureEnabled","screenOrientation","statusBarAnimation","statusBarColor","statusBarHidden","statusBarStyle","statusBarTranslucent","onWillAppear","onWillDisappear","onDisappear","e","removeScene","nativeEvent","maybeRenderNestedStack","render","descriptors","onFinishTransitioning","map","i","renderScene","create","flex","createStackNavigator","routeConfigMap","stackConfig","router","superGetStateForAction","getStateForAction","action","backRouteIndex","backRoute","find","indexOf","newRoutes","splice","isTransitioning"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  NativeSyntheticEvent,\n  Platform,\n  StyleSheet,\n  Animated,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n  TargetedEvent,\n} from 'react-native';\nimport {\n  Screen,\n  ScreenStack,\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderConfigProps,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderSearchBarView,\n  SearchBar,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  createNavigator,\n  SceneView,\n  StackActions,\n  StackRouter,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationStackRouterConfig,\n  NavigationParams,\n  NavigationRoute,\n  NavigationDescriptor,\n  NavigationState,\n  NavigationNavigator,\n  NavigationAction,\n  NavigationProp,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { NativeStackNavigationOptions as NativeStackNavigationOptionsV5 } from './native-stack/types';\nimport { HeaderBackButton } from 'react-navigation-stack';\nimport {\n  StackNavigationHelpers,\n  StackNavigationProp,\n  Layout,\n} from 'react-navigation-stack/src/vendor/types';\n\nconst REMOVE_ACTION = 'NativeStackNavigator/REMOVE';\n\nconst isAndroid = Platform.OS === 'android';\n\nlet didWarn = isAndroid;\n\nfunction renderComponentOrThunk(componentOrThunk: unknown, props: unknown) {\n  if (typeof componentOrThunk === 'function') {\n    return componentOrThunk(props);\n  }\n  return componentOrThunk;\n}\n\ntype NativeStackRemoveNavigationAction = {\n  type: typeof REMOVE_ACTION;\n  immediate: boolean;\n  dismissCount: number;\n  key?: string;\n};\n\nexport type NativeStackNavigationProp = StackNavigationProp;\n\nexport type NativeStackNavigationOptions = StackNavigatorOptions &\n  NativeStackNavigationOptionsV5 &\n  BackButtonProps & {\n    onWillAppear?: () => void;\n    onAppear?: () => void;\n    onWillDisappear?: () => void;\n    onDisappear?: () => void;\n    // these props differ from the ones used in v5 `native-stack`, and we would like to keep the API consistent between versions\n    /** Use `headerHideShadow` to be consistent with v5 `native-stack` */\n    hideShadow?: boolean;\n    /** Use `headerLargeTitle` to be consistent with v5 `native-stack` */\n    largeTitle?: boolean;\n    /** Use `headerLargeTitleHideShadow` to be consistent with v5 `native-stack` */\n    largeTitleHideShadow?: boolean;\n    /** Use `headerTranslucent` to be consistent with v5 `native-stack` */\n    translucent?: boolean;\n  };\n\n// these are adopted from `stack` navigator\ntype StackNavigatorOptions = {\n  /** This is an option from `stackNavigator` and it hides the header when set to `null`. Use `headerShown` instead to be consistent with v5 `native-stack`. */\n  header?: React.ComponentType<Record<string, unknown>> | null;\n  /** This is an option from `stackNavigator` and it controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  cardTransparent?: boolean;\n  /** This is an option from `stackNavigator` and it sets stack animation to none when `false` passed. Use `stackAnimation: 'none'` instead to be consistent with v5 `native-stack` */\n  animationEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype BackButtonProps = {\n  headerBackImage?: (props: { tintColor: string }) => React.ReactNode;\n  headerPressColorAndroid?: string;\n  headerTintColor?: string;\n  backButtonTitle?: string;\n  truncatedBackButtonTitle?: string;\n  backTitleVisible?: boolean;\n  headerBackTitleStyle?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n  layoutPreset?: Layout;\n};\n\ntype NativeStackDescriptor = NavigationDescriptor<\n  NavigationParams,\n  NativeStackNavigationOptions\n>;\n\ntype NativeStackDescriptorMap = {\n  [key: string]: NativeStackDescriptor;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype NativeStackNavigationConfig = {\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `cardTransparent` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  mode?: 'modal' | 'containedModal';\n  /** This is an option from `stackNavigator` and makes the header hide when set to `none`. Use `headerShown` instead to be consistent with v5 `native-stack` */\n  headerMode?: 'none';\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  transparentCard?: boolean;\n};\n\ntype Props = {\n  navigation: StackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n  navigationConfig: NativeStackNavigationConfig;\n  screenProps: unknown;\n};\nclass StackView extends React.Component<Props> {\n  private removeScene = (\n    route: NavigationRoute<NavigationParams>,\n    dismissCount: number\n  ) => {\n    this.props.navigation.dispatch({\n      // @ts-ignore special navigation action for native stack\n      type: REMOVE_ACTION,\n      immediate: true,\n      key: route.key,\n      dismissCount,\n    });\n  };\n\n  private onAppear = (\n    route: NavigationRoute<NavigationParams>,\n    descriptor: NativeStackDescriptor\n  ) => {\n    descriptor.options?.onAppear?.();\n    this.props.navigation.dispatch(\n      StackActions.completeTransition({\n        toChildKey: route.key,\n        key: this.props.navigation.state.key,\n      })\n    );\n  };\n\n  private onFinishTransitioning:\n    | ((e: NativeSyntheticEvent<TargetedEvent>) => void)\n    | undefined = () => {\n    const { routes } = this.props.navigation.state;\n    const lastRoute = routes?.length && routes[routes.length - 1];\n\n    if (lastRoute) {\n      this.props.navigation.dispatch(\n        StackActions.completeTransition({\n          toChildKey: lastRoute.key,\n          key: this.props.navigation.state.key,\n        })\n      );\n    }\n  };\n\n  private renderHeaderConfig = (\n    index: number,\n    route: NavigationRoute<NavigationParams>,\n    descriptor: NativeStackDescriptor\n  ) => {\n    const { navigationConfig } = this.props;\n    const { options } = descriptor;\n    const { headerMode } = navigationConfig;\n\n    const {\n      backButtonInCustomView,\n      direction,\n      disableBackButtonMenu,\n      headerBackTitle,\n      headerBackTitleStyle,\n      headerBackTitleVisible,\n      headerHideBackButton,\n      headerHideShadow,\n      headerLargeStyle,\n      headerLargeTitle,\n      headerLargeTitleHideShadow,\n      headerLargeTitleStyle,\n      headerShown,\n      headerStyle,\n      headerTintColor,\n      headerTitleStyle,\n      headerTopInsetEnabled = true,\n      headerTranslucent,\n      hideShadow,\n      largeTitle,\n      largeTitleHideShadow,\n      title,\n      translucent,\n    } = options;\n\n    const scene = {\n      index,\n      key: route.key,\n      route,\n      descriptor,\n    };\n\n    const headerOptions: ScreenStackHeaderConfigProps = {\n      backButtonInCustomView,\n      backTitle: headerBackTitleVisible === false ? '' : headerBackTitle,\n      backTitleFontFamily: headerBackTitleStyle?.fontFamily,\n      backTitleFontSize: headerBackTitleStyle?.fontSize,\n      color: headerTintColor,\n      direction,\n      disableBackButtonMenu,\n      topInsetEnabled: headerTopInsetEnabled,\n      hideBackButton: headerHideBackButton,\n      hideShadow: headerHideShadow || hideShadow,\n      largeTitle: headerLargeTitle || largeTitle,\n      largeTitleBackgroundColor:\n        headerLargeStyle?.backgroundColor ||\n        // @ts-ignore old implementation, will not be present in TS API, but can be used here\n        headerLargeTitleStyle?.backgroundColor,\n      largeTitleColor: headerLargeTitleStyle?.color,\n      largeTitleFontFamily: headerLargeTitleStyle?.fontFamily,\n      largeTitleFontSize: headerLargeTitleStyle?.fontSize,\n      largeTitleFontWeight: headerLargeTitleStyle?.fontWeight,\n      largeTitleHideShadow: largeTitleHideShadow || headerLargeTitleHideShadow,\n      title,\n      titleColor: headerTitleStyle?.color || headerTintColor,\n      titleFontFamily: headerTitleStyle?.fontFamily,\n      titleFontSize: headerTitleStyle?.fontSize,\n      titleFontWeight: headerTitleStyle?.fontWeight,\n      translucent: headerTranslucent || translucent || false,\n    };\n\n    const hasHeader =\n      headerShown !== false && headerMode !== 'none' && options.header !== null;\n    if (!hasHeader) {\n      return <ScreenStackHeaderConfig {...headerOptions} hidden />;\n    }\n\n    if (headerStyle !== undefined) {\n      headerOptions.backgroundColor = headerStyle.backgroundColor;\n      headerOptions.blurEffect = headerStyle.blurEffect;\n    }\n\n    const children = [];\n\n    if (options.backButtonImage) {\n      children.push(\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={options.backButtonImage}\n        />\n      );\n    }\n\n    if (Platform.OS === 'ios' && options.searchBar) {\n      children.push(\n        <ScreenStackHeaderSearchBarView>\n          <SearchBar {...options.searchBar} />\n        </ScreenStackHeaderSearchBarView>\n      );\n    }\n\n    if (options.headerLeft !== undefined) {\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          {renderComponentOrThunk(options.headerLeft, { scene })}\n        </ScreenStackHeaderLeftView>\n      );\n    } else if (options.headerBackImage !== undefined) {\n      const goBack = () => {\n        // Go back on next tick because button ripple effect needs to happen on Android\n        requestAnimationFrame(() => {\n          descriptor.navigation.goBack(descriptor.key);\n        });\n      };\n\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          <HeaderBackButton\n            onPress={goBack}\n            pressColorAndroid={options.headerPressColorAndroid}\n            tintColor={options.headerTintColor}\n            backImage={options.headerBackImage}\n            label={options.backButtonTitle}\n            truncatedLabel={options.truncatedBackButtonTitle}\n            labelVisible={options.backTitleVisible}\n            labelStyle={options.headerBackTitleStyle}\n            titleLayout={options.layoutPreset}\n            // @ts-ignore old props kept for very old version of `react-navigation-stack`\n            title={options.backButtonTitle}\n            truncatedTitle={options.truncatedBackButtonTitle}\n            backTitleVisible={options.backTitleVisible}\n            titleStyle={options.headerBackTitleStyle}\n            layoutPreset={options.layoutPreset}\n            scene={scene}\n          />\n        </ScreenStackHeaderLeftView>\n      );\n    }\n\n    if (options.headerTitle) {\n      if (title === undefined && typeof options.headerTitle === 'string') {\n        headerOptions.title = options.headerTitle;\n      } else {\n        children.push(\n          <ScreenStackHeaderCenterView key=\"center\">\n            {renderComponentOrThunk(options.headerTitle, { scene })}\n          </ScreenStackHeaderCenterView>\n        );\n      }\n    }\n\n    if (options.headerRight) {\n      children.push(\n        <ScreenStackHeaderRightView key=\"right\">\n          {renderComponentOrThunk(options.headerRight, { scene })}\n        </ScreenStackHeaderRightView>\n      );\n    }\n\n    if (children.length > 0) {\n      headerOptions.children = children;\n    }\n\n    return <ScreenStackHeaderConfig {...headerOptions} />;\n  };\n\n  private maybeRenderNestedStack = (\n    isHeaderInModal: boolean,\n    screenProps: unknown,\n    route: NavigationRoute<NavigationParams>,\n    navigation: NavigationScreenProp<\n      NavigationRoute<NavigationParams>,\n      NavigationParams\n    >,\n    SceneComponent: React.ComponentType<Record<string, unknown>>,\n    index: number,\n    descriptor: NativeStackDescriptor\n  ) => {\n    if (isHeaderInModal) {\n      return (\n        <ScreenStack style={styles.scenes}>\n          <Screen style={StyleSheet.absoluteFill}>\n            {this.renderHeaderConfig(index, route, descriptor)}\n            <SceneView\n              screenProps={screenProps}\n              navigation={navigation}\n              component={SceneComponent}\n            />\n          </Screen>\n        </ScreenStack>\n      );\n    }\n    return (\n      <SceneView\n        screenProps={screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderScene = (\n    index: number,\n    route: NavigationRoute<NavigationParams>,\n    descriptor: NativeStackDescriptor\n  ) => {\n    const { navigation, getComponent, options } = descriptor;\n    const { mode, transparentCard } = this.props.navigationConfig;\n    const SceneComponent = getComponent();\n\n    let stackPresentation: StackPresentationTypes = 'push';\n\n    if (options.stackPresentation) {\n      stackPresentation = options.stackPresentation;\n    } else {\n      // this shouldn't be used because we have a prop for that\n      if (mode === 'modal' || mode === 'containedModal') {\n        stackPresentation = mode;\n        if (transparentCard || options.cardTransparent) {\n          stackPresentation =\n            mode === 'containedModal'\n              ? 'containedTransparentModal'\n              : 'transparentModal';\n        }\n      }\n    }\n    let stackAnimation = options.stackAnimation;\n    if (options.animationEnabled === false) {\n      stackAnimation = 'none';\n    }\n\n    const hasHeader =\n      options.headerShown !== false &&\n      this.props.navigationConfig?.headerMode !== 'none' &&\n      options.header !== null;\n\n    if (\n      !didWarn &&\n      stackPresentation !== 'push' &&\n      options.headerShown !== undefined\n    ) {\n      didWarn = true;\n      console.warn(\n        'Be aware that changing the visibility of header in modal on iOS will result in resetting the state of the screen.'\n      );\n    }\n\n    const isHeaderInModal = isAndroid\n      ? false\n      : stackPresentation !== 'push' &&\n        hasHeader &&\n        options.headerShown === true;\n    const isHeaderInPush = isAndroid\n      ? hasHeader\n      : stackPresentation === 'push' && hasHeader;\n\n    const { screenProps } = this.props;\n    return (\n      <Screen\n        key={`screen_${route.key}`}\n        enabled\n        style={[StyleSheet.absoluteFill, options.cardStyle]}\n        stackAnimation={stackAnimation}\n        stackPresentation={stackPresentation}\n        replaceAnimation={\n          options.replaceAnimation === undefined\n            ? 'pop'\n            : options.replaceAnimation\n        }\n        pointerEvents={\n          index === this.props.navigation.state.routes.length - 1\n            ? 'auto'\n            : 'none'\n        }\n        gestureEnabled={\n          Platform.OS === 'android'\n            ? false\n            : options.gestureEnabled === undefined\n            ? true\n            : options.gestureEnabled\n        }\n        screenOrientation={options.screenOrientation}\n        statusBarAnimation={options.statusBarAnimation}\n        statusBarColor={options.statusBarColor}\n        statusBarHidden={options.statusBarHidden}\n        statusBarStyle={options.statusBarStyle}\n        statusBarTranslucent={options.statusBarTranslucent}\n        onAppear={() => this.onAppear(route, descriptor)}\n        onWillAppear={() => options?.onWillAppear?.()}\n        onWillDisappear={() => options?.onWillDisappear?.()}\n        onDisappear={() => options?.onDisappear?.()}\n        onDismissed={(e) =>\n          this.removeScene(route, e.nativeEvent.dismissCount)\n        }>\n        {isHeaderInPush && this.renderHeaderConfig(index, route, descriptor)}\n        {this.maybeRenderNestedStack(\n          isHeaderInModal,\n          screenProps,\n          route,\n          navigation,\n          SceneComponent,\n          index,\n          descriptor\n        )}\n      </Screen>\n    );\n  };\n\n  render() {\n    const { navigation, descriptors } = this.props;\n\n    return (\n      <ScreenStack\n        style={styles.scenes}\n        onFinishTransitioning={this.onFinishTransitioning}>\n        {navigation.state.routes.map((route, i) =>\n          this.renderScene(i, route, descriptors[route.key])\n        )}\n      </ScreenStack>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  scenes: { flex: 1 },\n});\n\nfunction createStackNavigator(\n  routeConfigMap: NavigationRouteConfigMap<\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  >,\n  stackConfig: CreateNavigatorConfig<\n    NativeStackNavigationConfig,\n    NavigationStackRouterConfig,\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  > = {}\n): NavigationNavigator<\n  Record<string, unknown>,\n  NavigationProp<NavigationState>\n> {\n  const router = StackRouter(routeConfigMap, stackConfig);\n\n  // below we override getStateForAction method in order to add handling for\n  // a custom native stack navigation action. The action REMOVE that we want to\n  // add works in a similar way to POP, but it does not remove all the routes\n  // that sit on top of the removed route. For example if we have three routes\n  // [a,b,c] and call POP on b, then both b and c will go away. In case we\n  // call REMOVE on b, only b will be removed from the stack and the resulting\n  // state will be [a, c]\n  const superGetStateForAction = router.getStateForAction;\n  router.getStateForAction = (\n    action: NavigationAction | NativeStackRemoveNavigationAction,\n    state\n  ) => {\n    if (action.type === REMOVE_ACTION) {\n      const { key, immediate, dismissCount } = action;\n      let backRouteIndex = state.index;\n      if (key) {\n        const backRoute = state.routes.find(\n          (route: NavigationRoute<NavigationParams>) => route.key === key\n        );\n        backRouteIndex = state.routes.indexOf(backRoute);\n      }\n\n      if (backRouteIndex > 0) {\n        const newRoutes = [...state.routes];\n        if (dismissCount > 1) {\n          // when dismissing with iOS 14 native header back button, we can pop more than 1 screen at a time\n          // and the `backRouteIndex` is the index of the previous screen. Since we are starting already\n          // on the previous screen, we add 1 to start.\n          newRoutes.splice(backRouteIndex - dismissCount + 1, dismissCount);\n        } else {\n          newRoutes.splice(backRouteIndex, 1);\n        }\n\n        return {\n          ...state,\n          routes: newRoutes,\n          index: newRoutes.length - 1,\n          isTransitioning: immediate !== true,\n        };\n      }\n    }\n    return superGetStateForAction(action as NavigationAction, state);\n  };\n  // Create a navigator with StackView as the view\n  return createNavigator(StackView, router, stackConfig);\n}\n\nexport default createStackNavigator;\n"]}